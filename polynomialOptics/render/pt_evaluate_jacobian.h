const float dx00 =  + -1.10799  + -0.0905798 *lambda + 0.0754832 *y*dy + 0.266451 *x*dx + 0.00105276 *lens_ipow(y, 2) + 0.00359001 *lens_ipow(x, 2) + 1.23306 *lens_ipow(dy, 2) + 3.36803 *lens_ipow(dx, 2) + -0.00033158 *x*lens_ipow(y, 2)*dx + -4.89629e-06 *lens_ipow(x, 5)*dx + -6.11063e-06 *lens_ipow(x, 2)*lens_ipow(y, 3)*dy + -1.93212e-07 *lens_ipow(x, 2)*lens_ipow(y, 4) + -0.0525905 *x*y*lens_ipow(dx, 3)*dy + -1.96261e-07 *lens_ipow(x, 4)*lens_ipow(y, 2) + -0.0174342 *lens_ipow(x, 2)*lens_ipow(dx, 4) + -1.3708e-07 *lens_ipow(x, 6) + -0.128373 *lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 4) + -6.99074e-11 *lens_ipow(y, 8) + -2.8667e-09 *lens_ipow(y, 7)*dy + 1.16668e-06 *lens_ipow(x, 5)*y*dx*dy + 6.86559e-09 *lens_ipow(x, 4)*lens_ipow(y, 4)*lens_ipow(dx, 2)+0.0f;
const float dx01 =  + 2.10515 *dx*dy + 0.0754832 *x*dy + 0.00210551 *x*y + 0.106894 *y*dx + -0.00033158 *lens_ipow(x, 2)*y*dx + -6.11063e-06 *lens_ipow(x, 3)*lens_ipow(y, 2)*dy + -2.57615e-07 *lens_ipow(x, 3)*lens_ipow(y, 3) + -0.0262952 *lens_ipow(x, 2)*lens_ipow(dx, 3)*dy + -7.85046e-08 *lens_ipow(x, 5)*y + -0.256745 *x*y*lens_ipow(dx, 2)*lens_ipow(dy, 4) + -5.59259e-10 *x*lens_ipow(y, 7) + -2.00669e-08 *x*lens_ipow(y, 6)*dy + 1.94447e-07 *lens_ipow(x, 6)*dx*dy + 5.49247e-09 *lens_ipow(x, 5)*lens_ipow(y, 3)*lens_ipow(dx, 2)+0.0f;
const float dx02 =  + 40.196 *lambda + 2.10515 *y*dy + 0.133226 *lens_ipow(x, 2) + 80.3729 *lens_ipow(dx, 2) + 27.9088 *lens_ipow(dy, 2) + 6.73605 *x*dx + 0.0534469 *lens_ipow(y, 2) + -61.0312 *lens_ipow(lambda, 2) + 30.4395 *lens_ipow(lambda, 3) + -0.00016579 *lens_ipow(x, 2)*lens_ipow(y, 2) + -8.16049e-07 *lens_ipow(x, 6) + -0.0788857 *lens_ipow(x, 2)*y*lens_ipow(dx, 2)*dy + -0.0232457 *lens_ipow(x, 3)*lens_ipow(dx, 3) + -0.256745 *x*lens_ipow(y, 2)*dx*lens_ipow(dy, 4) + 1.94447e-07 *lens_ipow(x, 6)*y*dy + 2.74623e-09 *lens_ipow(x, 5)*lens_ipow(y, 4)*dx+0.0f;
const float dx03 =  + 2.10515 *y*dx + 0.0754832 *x*y + 55.8176 *dx*dy + 2.46611 *x*dy + -2.03688e-06 *lens_ipow(x, 3)*lens_ipow(y, 3) + -0.0262952 *lens_ipow(x, 2)*y*lens_ipow(dx, 3) + -0.51349 *x*lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 3) + -2.8667e-09 *x*lens_ipow(y, 7) + 1.94447e-07 *lens_ipow(x, 6)*y*dx+0.0f;
const float dx04 =  + -0.0905798 *x + 40.196 *dx + -122.062 *dx*lambda + 91.3186 *dx*lens_ipow(lambda, 2)+0.0f;
const float dx10 =  + 1.9089 *dx*dy + 0.0699908 *y*dx + 0.00171218 *x*y + 0.10206 *x*dy + -1.25836 *lens_ipow(dx, 3)*dy + -0.000402718 *lens_ipow(x, 2)*y*dx + -0.000334263 *x*lens_ipow(y, 2)*dy + -6.75479e-08 *lens_ipow(x, 5)*y + -6.73939e-08 *x*lens_ipow(y, 5) + -1.5612e-07 *lens_ipow(x, 3)*lens_ipow(y, 3) + 2.30271e-07 *lens_ipow(y, 6)*dx*dy*lambda + 6.98854e-09 *lens_ipow(x, 3)*lens_ipow(y, 5)*lens_ipow(dx, 2)+0.0f;
const float dx11 =  + -1.00151  + -0.455304 *lambda + 0.995845 *lens_ipow(dx, 2) + 0.260158 *y*dy + 3.34769 *lens_ipow(dy, 2) + 0.0699908 *x*dx + 0.324668 *lens_ipow(lambda, 2) + 0.000856088 *lens_ipow(x, 2) + 0.00331746 *lens_ipow(y, 2) + -0.000134239 *lens_ipow(x, 3)*dx + 0.00570007 *lens_ipow(y, 2)*lens_ipow(dx, 2) + -3.15418 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + -0.000334263 *lens_ipow(x, 2)*y*dy + -1.25782e-07 *lens_ipow(y, 6) + -4.31533e-06 *lens_ipow(y, 5)*dy + -1.1258e-08 *lens_ipow(x, 6) + -1.68485e-07 *lens_ipow(x, 2)*lens_ipow(y, 4) + -1.1709e-07 *lens_ipow(x, 4)*lens_ipow(y, 2) + 0.286312 *y*lens_ipow(dy, 5) + 1.38163e-06 *x*lens_ipow(y, 5)*dx*dy*lambda + 8.73567e-09 *lens_ipow(x, 4)*lens_ipow(y, 4)*lens_ipow(dx, 2)+0.0f;
const float dx12 =  + 1.99169 *y*dx + 1.9089 *x*dy + 0.0699908 *x*y + 37.1284 *dx*dy + -3.77509 *x*lens_ipow(dx, 2)*dy + -0.000134239 *lens_ipow(x, 3)*y + 0.00380005 *lens_ipow(y, 3)*dx + -6.30836 *y*dx*lens_ipow(dy, 2) + 2.30271e-07 *x*lens_ipow(y, 6)*dy*lambda + 3.49427e-09 *lens_ipow(x, 4)*lens_ipow(y, 5)*dx+0.0f;
const float dx13 =  + 8.2466  + 0.97099 *lambda + 0.130079 *lens_ipow(y, 2) + 6.69538 *y*dy + 1.9089 *x*dx + 18.5642 *lens_ipow(dx, 2) + 0.05103 *lens_ipow(x, 2) + 79.2611 *lens_ipow(dy, 2) + -1.25836 *x*lens_ipow(dx, 3) + -6.30836 *y*lens_ipow(dx, 2)*dy + -0.000167132 *lens_ipow(x, 2)*lens_ipow(y, 2) + -7.19221e-07 *lens_ipow(y, 6) + 0.715781 *lens_ipow(y, 2)*lens_ipow(dy, 4) + 2.30271e-07 *x*lens_ipow(y, 6)*dx*lambda+0.0f;
const float dx14 =  + 0.97099 *dy + -0.455304 *y + 0.649335 *y*lambda + 2.30271e-07 *x*lens_ipow(y, 6)*dx*dy+0.0f;
const float dx20 =  + -0.0790022  + 0.00582542 *lambda + 0.00473224 *x*dx + 3.81983e-05 *lens_ipow(y, 2) + 0.000267738 *lens_ipow(x, 2) + 0.172699 *lens_ipow(dx, 2)*lambda + 0.0124266 *x*dx*lens_ipow(lambda, 3) + -3.89566e-11 *lens_ipow(x, 6)*lens_ipow(y, 2) + 3.86556e-09 *lens_ipow(y, 6)*lens_ipow(lambda, 2) + 5.03358e-05 *lens_ipow(y, 3)*dy*lens_ipow(lambda, 4) + 1.35499e-07 *lens_ipow(y, 5)*dy*lens_ipow(lambda, 2) + -0.000124451 *lens_ipow(x, 3)*dx*lens_ipow(lambda, 4) + 2.01706e-08 *lens_ipow(x, 2)*lens_ipow(y, 4)*lens_ipow(lambda, 2) + -8.50564e-11 *lens_ipow(x, 2)*lens_ipow(y, 6)*lambda + -1.48141e-10 *lens_ipow(x, 4)*lens_ipow(y, 4)*lambda + -2.73274e-11 *lens_ipow(x, 8)*lambda + 0.000333164 *lens_ipow(x, 3)*lens_ipow(dx, 3)*lens_ipow(lambda, 4) + -1.12336e-11 *lens_ipow(y, 8)*lens_ipow(lambda, 2) + 1.24652e-05 *lens_ipow(y, 4)*lens_ipow(dy, 2)*lens_ipow(lambda, 4)+0.0f;
const float dx21 =  + 7.63966e-05 *x*y + 0.00331265 *y*dx*lambda + 2.32494e-05 *lens_ipow(y, 3)*dx + 0.0029981 *lens_ipow(y, 2)*dx*dy*lens_ipow(lambda, 2) + -1.11305e-11 *lens_ipow(x, 7)*y + 2.31933e-08 *x*lens_ipow(y, 5)*lens_ipow(lambda, 2) + 0.000151007 *x*lens_ipow(y, 2)*dy*lens_ipow(lambda, 4) + 6.77497e-07 *x*lens_ipow(y, 4)*dy*lens_ipow(lambda, 2) + 2.68941e-08 *lens_ipow(x, 3)*lens_ipow(y, 3)*lens_ipow(lambda, 2) + -0.0137627 *lens_ipow(y, 2)*dx*lens_ipow(dy, 3)*lens_ipow(lambda, 3) + -1.70113e-10 *lens_ipow(x, 3)*lens_ipow(y, 5)*lambda + -1.18513e-10 *lens_ipow(x, 5)*lens_ipow(y, 3)*lambda + 1.82113e-07 *lens_ipow(y, 5)*dx*lens_ipow(lambda, 4) + -8.98691e-11 *x*lens_ipow(y, 7)*lens_ipow(lambda, 2) + 4.9861e-05 *x*lens_ipow(y, 3)*lens_ipow(dy, 2)*lens_ipow(lambda, 4)+0.0f;
const float dx22 =  + -0.24973  + 0.00236612 *lens_ipow(x, 2) + 0.345397 *x*dx*lambda + 0.00165633 *lens_ipow(y, 2)*lambda + 5.81234e-06 *lens_ipow(y, 4) + 20.1748 *lens_ipow(dx, 2)*lens_ipow(lambda, 2) + -18.2014 *lens_ipow(dx, 2)*lens_ipow(lambda, 3) + 0.00621329 *lens_ipow(x, 2)*lens_ipow(lambda, 3) + 0.000999368 *lens_ipow(y, 3)*dy*lens_ipow(lambda, 2) + -3.11126e-05 *lens_ipow(x, 4)*lens_ipow(lambda, 4) + 855.11 *lens_ipow(dx, 4)*lens_ipow(dy, 4)*lambda + -0.00458756 *lens_ipow(y, 3)*lens_ipow(dy, 3)*lens_ipow(lambda, 3) + 3.03521e-08 *lens_ipow(y, 6)*lens_ipow(lambda, 4) + 0.000249873 *lens_ipow(x, 4)*lens_ipow(dx, 2)*lens_ipow(lambda, 4)+0.0f;
const float dx23 =  + 0.000999368 *lens_ipow(y, 3)*dx*lens_ipow(lambda, 2) + 5.03358e-05 *x*lens_ipow(y, 3)*lens_ipow(lambda, 4) + 1.35499e-07 *x*lens_ipow(y, 5)*lens_ipow(lambda, 2) + 684.088 *lens_ipow(dx, 5)*lens_ipow(dy, 3)*lambda + -0.0137627 *lens_ipow(y, 3)*dx*lens_ipow(dy, 2)*lens_ipow(lambda, 3) + 2.49305e-05 *x*lens_ipow(y, 4)*dy*lens_ipow(lambda, 4)+0.0f;
const float dx24 =  + 0.00582542 *x + 0.172699 *x*lens_ipow(dx, 2) + 0.00165633 *lens_ipow(y, 2)*dx + 13.4498 *lens_ipow(dx, 3)*lambda + -18.2014 *lens_ipow(dx, 3)*lens_ipow(lambda, 2) + 0.0186399 *lens_ipow(x, 2)*dx*lens_ipow(lambda, 2) + 0.00199874 *lens_ipow(y, 3)*dx*dy*lambda + 7.73111e-09 *x*lens_ipow(y, 6)*lambda + 0.000201343 *x*lens_ipow(y, 3)*dy*lens_ipow(lambda, 3) + 2.70999e-07 *x*lens_ipow(y, 5)*dy*lambda + -0.000124451 *lens_ipow(x, 4)*dx*lens_ipow(lambda, 3) + 1.34471e-08 *lens_ipow(x, 3)*lens_ipow(y, 4)*lambda + 171.022 *lens_ipow(dx, 5)*lens_ipow(dy, 4) + -0.0137627 *lens_ipow(y, 3)*dx*lens_ipow(dy, 3)*lens_ipow(lambda, 2) + -2.83521e-11 *lens_ipow(x, 3)*lens_ipow(y, 6) + -2.96283e-11 *lens_ipow(x, 5)*lens_ipow(y, 4) + -3.03637e-12 *lens_ipow(x, 9) + 1.21408e-07 *lens_ipow(y, 6)*dx*lens_ipow(lambda, 3) + 0.000333164 *lens_ipow(x, 4)*lens_ipow(dx, 3)*lens_ipow(lambda, 3) + -2.24673e-11 *x*lens_ipow(y, 8)*lambda + 4.9861e-05 *x*lens_ipow(y, 4)*lens_ipow(dy, 2)*lens_ipow(lambda, 3)+0.0f;
const float dx30 =  + 0.0529577 *dx*dy + 0.000225211 *x*y + 0.0026377 *x*dy + 0.00206368 *y*dx*lambda + 0.0544768 *dx*dy*lens_ipow(lambda, 2) + -0.0347859 *lens_ipow(dx, 3)*dy + 7.50802e-05 *lens_ipow(x, 3)*lens_ipow(dy, 3)*lambda + 6.09562e-06 *lens_ipow(x, 2)*lens_ipow(y, 2)*dx*dy*lens_ipow(lambda, 2) + -1.18579e-11 *x*lens_ipow(y, 7)*lambda + -2.93642e-13 *lens_ipow(x, 7)*lens_ipow(y, 3) + -1.91145e-13 *lens_ipow(x, 3)*lens_ipow(y, 7)+0.0f;
const float dx31 =  + -0.0812351  + 0.0140781 *lambda + 0.0066131 *y*dy + 0.106182 *lens_ipow(dy, 2) + -0.00852811 *lens_ipow(lambda, 2) + 0.000112606 *lens_ipow(x, 2) + 0.000267681 *lens_ipow(y, 2) + 0.00206368 *x*dx*lambda + 0.114422 *lens_ipow(dx, 2)*lens_ipow(lambda, 2) + 0.00723471 *y*lens_ipow(dx, 2)*dy + -0.0311424 *lens_ipow(dy, 4) + 0.000280172 *lens_ipow(y, 2)*lens_ipow(dx, 2) + -0.0805241 *lens_ipow(dx, 2)*lens_ipow(lambda, 3) + 4.06375e-06 *lens_ipow(x, 3)*y*dx*dy*lens_ipow(lambda, 2) + -9.22309e-12 *lens_ipow(y, 8)*lambda + -4.15026e-11 *lens_ipow(x, 2)*lens_ipow(y, 6)*lambda + -3.11856e-14 *lens_ipow(y, 10) + -1.10116e-13 *lens_ipow(x, 8)*lens_ipow(y, 2) + -3.34504e-13 *lens_ipow(x, 4)*lens_ipow(y, 6)+0.0f;
const float dx32 =  + 0.0529577 *x*dy + 3.44627 *dx*dy*lambda + 0.00206368 *x*y*lambda + 0.0544768 *x*dy*lens_ipow(lambda, 2) + -0.104358 *x*lens_ipow(dx, 2)*dy + 0.228845 *y*dx*lens_ipow(lambda, 2) + 0.00723471 *lens_ipow(y, 2)*dx*dy + 0.000186781 *lens_ipow(y, 3)*dx + -0.161048 *y*dx*lens_ipow(lambda, 3) + 2.03187e-06 *lens_ipow(x, 3)*lens_ipow(y, 2)*dy*lens_ipow(lambda, 2)+0.0f;
const float dx33 =  + -0.280867  + 0.0429656 *lambda + 0.00330655 *lens_ipow(y, 2) + 0.212365 *y*dy + 0.0529577 *x*dx + 0.00131885 *lens_ipow(x, 2) + 3.34998 *lens_ipow(dy, 2) + 1.72313 *lens_ipow(dx, 2)*lambda + 0.0544768 *x*dx*lens_ipow(lambda, 2) + -0.0347859 *x*lens_ipow(dx, 3) + 0.00361735 *lens_ipow(y, 2)*lens_ipow(dx, 2) + -0.12457 *y*lens_ipow(dy, 3) + 5.63101e-05 *lens_ipow(x, 4)*lens_ipow(dy, 2)*lambda + 2.03187e-06 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx*lens_ipow(lambda, 2)+0.0f;
const float dx34 =  + 0.0429656 *dy + 0.0140781 *y + -0.0170562 *y*lambda + 1.72313 *lens_ipow(dx, 2)*dy + 0.00206368 *x*y*dx + 0.108954 *x*dx*dy*lambda + 0.228845 *y*lens_ipow(dx, 2)*lambda + -0.241572 *y*lens_ipow(dx, 2)*lens_ipow(lambda, 2) + 1.877e-05 *lens_ipow(x, 4)*lens_ipow(dy, 3) + 4.06375e-06 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx*dy*lambda + -1.02479e-12 *lens_ipow(y, 9) + -5.92894e-12 *lens_ipow(x, 2)*lens_ipow(y, 7)+0.0f;
const float dx40 =  + -4.32134e-06 *x*lens_ipow(y, 2) + -7.05812e-06 *lens_ipow(x, 3)*lambda + 0.00280576 *y*dx*dy*lambda + -2.46563e-06 *lens_ipow(x, 4)*dx*lambda + -1.36343e-08 *lens_ipow(x, 2)*lens_ipow(y, 4)*dx + -1.96298e-10 *lens_ipow(x, 7) + -0.0114921 *y*lens_ipow(dx, 3)*dy*lens_ipow(lambda, 2) + -3.1894e-08 *lens_ipow(x, 3)*lens_ipow(y, 3)*dy*lambda + -0.0138635 *y*dx*lens_ipow(dy, 3)*lens_ipow(lambda, 3) + -9.21054e-07 *lens_ipow(x, 2)*lens_ipow(y, 3)*dx*dy*lambda + 2.61509e-10 *x*lens_ipow(y, 6)*lambda + -0.000169894 *lens_ipow(x, 2)*dx*lens_ipow(lambda, 6) + -4.82484e-12 *lens_ipow(x, 3)*lens_ipow(y, 6) + -3.77144e-07 *lens_ipow(x, 5)*lens_ipow(dx, 2)*lens_ipow(lambda, 2) + -2.05863e-12 *lens_ipow(x, 7)*lens_ipow(y, 2) + -2.32076e-12 *x*lens_ipow(y, 8)*lambda + -1.2397e-11 *lens_ipow(x, 5)*lens_ipow(y, 4)*lambda+0.0f;
const float dx41 =  + 0.0145961 *lens_ipow(dy, 3) + -4.32134e-06 *lens_ipow(x, 2)*y + -0.000114643 *lens_ipow(y, 2)*dy + -2.13886e-06 *lens_ipow(y, 3)*lambda + 0.00280576 *x*dx*dy*lambda + -1.29921e-07 *lens_ipow(y, 5) + -1.81791e-08 *lens_ipow(x, 3)*lens_ipow(y, 3)*dx + 1.16811e-09 *lens_ipow(y, 7) + -0.0114921 *x*lens_ipow(dx, 3)*dy*lens_ipow(lambda, 2) + -2.39205e-08 *lens_ipow(x, 4)*lens_ipow(y, 2)*dy*lambda + -0.0138635 *x*dx*lens_ipow(dy, 3)*lens_ipow(lambda, 3) + -9.21054e-07 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx*dy*lambda + 7.84527e-10 *lens_ipow(x, 2)*lens_ipow(y, 5)*lambda + -3.74594e-12 *lens_ipow(y, 9) + -7.23727e-12 *lens_ipow(x, 4)*lens_ipow(y, 5) + -5.14657e-13 *lens_ipow(x, 8)*y + -9.28305e-12 *lens_ipow(x, 2)*lens_ipow(y, 7)*lambda + -8.26466e-12 *lens_ipow(x, 6)*lens_ipow(y, 3)*lambda+0.0f;
const float dx42 =  + -1.1375 *dx*lens_ipow(dy, 2) + 0.00280576 *x*y*dy*lambda + -4.76348 *lens_ipow(dx, 5) + -4.93127e-07 *lens_ipow(x, 5)*lambda + -4.54478e-09 *lens_ipow(x, 3)*lens_ipow(y, 4) + -0.0344764 *x*y*lens_ipow(dx, 2)*dy*lens_ipow(lambda, 2) + -0.0138635 *x*y*lens_ipow(dy, 3)*lens_ipow(lambda, 3) + -3.07018e-07 *lens_ipow(x, 3)*lens_ipow(y, 3)*dy*lambda + -5.66313e-05 *lens_ipow(x, 3)*lens_ipow(lambda, 6) + -1.25715e-07 *lens_ipow(x, 6)*dx*lens_ipow(lambda, 2)+0.0f;
const float dx43 =  + 0.0437881 *y*lens_ipow(dy, 2) + -1.1375 *lens_ipow(dx, 2)*dy + -3.82145e-05 *lens_ipow(y, 3) + 0.00280576 *x*y*dx*lambda + -0.0114921 *x*y*lens_ipow(dx, 3)*lens_ipow(lambda, 2) + -7.97349e-09 *lens_ipow(x, 4)*lens_ipow(y, 3)*lambda + -0.0415905 *x*y*dx*lens_ipow(dy, 2)*lens_ipow(lambda, 3) + -3.07018e-07 *lens_ipow(x, 3)*lens_ipow(y, 3)*dx*lambda+0.0f;
const float dx44 =  + 0.829835  + -2.16429 *lambda + 1.51078 *lens_ipow(lambda, 2) + -1.76453e-06 *lens_ipow(x, 4) + -5.34716e-07 *lens_ipow(y, 4) + 0.00280576 *x*y*dx*dy + -4.93127e-07 *lens_ipow(x, 5)*dx + -0.0229842 *x*y*lens_ipow(dx, 3)*dy*lambda + -7.97349e-09 *lens_ipow(x, 4)*lens_ipow(y, 3)*dy + -0.0415905 *x*y*dx*lens_ipow(dy, 3)*lens_ipow(lambda, 2) + -3.07018e-07 *lens_ipow(x, 3)*lens_ipow(y, 3)*dx*dy + 1.30754e-10 *lens_ipow(x, 2)*lens_ipow(y, 6) + -0.000339788 *lens_ipow(x, 3)*dx*lens_ipow(lambda, 5) + -1.25715e-07 *lens_ipow(x, 6)*lens_ipow(dx, 2)*lambda + -1.16038e-12 *lens_ipow(x, 2)*lens_ipow(y, 8) + -2.06616e-12 *lens_ipow(x, 6)*lens_ipow(y, 4)+0.0f;
