const float dx00 =  + 0.714404  + 0.032411 *y*dy + 0.0993585 *x*dx + 0.464028 *lens_ipow(dy, 2) + 1.51791 *lens_ipow(dx, 2) + -5.72026e-06 *lens_ipow(x, 4) + -0.00270999 *lens_ipow(x, 3)*lens_ipow(dx, 3) + -1.69402e-07 *lens_ipow(x, 2)*lens_ipow(y, 4) + -1.06254e-06 *lens_ipow(x, 4)*y*dy + -1.20413e-06 *x*lens_ipow(y, 4)*dx + -0.0294639 *lens_ipow(x, 2)*lens_ipow(dx, 4) + -5.44857e-07 *lens_ipow(x, 6)*lens_ipow(dx, 2) + -7.13255e-11 *lens_ipow(y, 8) + -1.76932e-09 *lens_ipow(x, 6)*lens_ipow(y, 2) + 4.89529e-07 *lens_ipow(x, 2)*lens_ipow(y, 4)*lens_ipow(dy, 2) + -1.83603e-08 *lens_ipow(x, 3)*lens_ipow(y, 4)*dx*lambda + 1.68934e-07 *lens_ipow(x, 6)*lens_ipow(dy, 2)*lambda + -2.35082e-12 *lens_ipow(x, 10) + -2.24913e-10 *lens_ipow(x, 7)*lens_ipow(y, 2)*dx + -1.07931e-10 *lens_ipow(x, 9)*dx + -7.39003e-12 *lens_ipow(y, 9)*dy+0.0f;
const float dx01 =  + 1.13639 *dx*dy + 0.032411 *x*dy + 0.0385757 *y*dx + -2.25869e-07 *lens_ipow(x, 3)*lens_ipow(y, 3) + -2.12508e-07 *lens_ipow(x, 5)*dy + -2.40826e-06 *lens_ipow(x, 2)*lens_ipow(y, 3)*dx + -1.33268e-07 *lens_ipow(y, 6)*dx*dy + -5.35505e-09 *lens_ipow(y, 7)*dx + -5.70604e-10 *x*lens_ipow(y, 7) + -5.0552e-10 *lens_ipow(x, 7)*y + 6.52705e-07 *lens_ipow(x, 3)*lens_ipow(y, 3)*lens_ipow(dy, 2) + -1.83603e-08 *lens_ipow(x, 4)*lens_ipow(y, 3)*dx*lambda + -5.62283e-11 *lens_ipow(x, 8)*y*dx + -6.65102e-11 *x*lens_ipow(y, 8)*dy+0.0f;
const float dx02 =  + 24.0758  + 1.13639 *y*dy + 0.0496792 *lens_ipow(x, 2) + 27.5798 *lens_ipow(dx, 2) + 10.149 *lens_ipow(dy, 2) + 3.03582 *x*dx + 0.0192878 *lens_ipow(y, 2) + -0.00203249 *lens_ipow(x, 4)*lens_ipow(dx, 2) + -6.02066e-07 *lens_ipow(x, 2)*lens_ipow(y, 4) + -0.0392852 *lens_ipow(x, 3)*lens_ipow(dx, 3) + -1.90383e-08 *lens_ipow(y, 7)*dy + -6.69381e-10 *lens_ipow(y, 8) + -1.55674e-07 *lens_ipow(x, 7)*dx + -4.59009e-09 *lens_ipow(x, 4)*lens_ipow(y, 4)*lambda + -2.81141e-11 *lens_ipow(x, 8)*lens_ipow(y, 2) + -1.07931e-11 *lens_ipow(x, 10)+0.0f;
const float dx03 =  + 1.13639 *y*dx + 0.032411 *x*y + 20.2981 *dx*dy + 0.928057 *x*dy + -2.12508e-07 *lens_ipow(x, 5)*y + -1.90383e-08 *lens_ipow(y, 7)*dx + 3.26352e-07 *lens_ipow(x, 3)*lens_ipow(y, 4)*dy + 4.82668e-08 *lens_ipow(x, 7)*dy*lambda + -7.39003e-12 *x*lens_ipow(y, 9)+0.0f;
const float dx04 =  + -4.59009e-09 *lens_ipow(x, 4)*lens_ipow(y, 4)*dx + 2.41334e-08 *lens_ipow(x, 7)*lens_ipow(dy, 2)+0.0f;
const float dx10 =  + 1.1315 *dx*dy + 0.033149 *y*dx + 0.0378303 *x*dy + -1.59389e-07 *lens_ipow(y, 5)*dx + -2.67972e-07 *lens_ipow(x, 3)*lens_ipow(y, 3) + -2.93477e-06 *lens_ipow(x, 3)*lens_ipow(y, 2)*dy + 8.05875e-08 *lens_ipow(x, 3)*lens_ipow(y, 3)*lambda + -4.36285e-10 *lens_ipow(x, 7)*y + 5.57274e-07 *lens_ipow(x, 3)*lens_ipow(y, 3)*lens_ipow(dx, 2) + -5.03497e-10 *x*lens_ipow(y, 7) + 1.36582e-09 *lens_ipow(x, 7)*y*lens_ipow(dx, 2) + -5.83891e-11 *x*lens_ipow(y, 8)*dy + -1.60411e-11 *lens_ipow(x, 9)*dy + 2.56544e-09 *lens_ipow(x, 2)*lens_ipow(y, 6)*dx*dy + -0.00100728 *lens_ipow(x, 4)*lens_ipow(dx, 3)*lens_ipow(dy, 3)+0.0f;
const float dx11 =  + 0.720082  + -0.014603 *lambda + 0.488201 *lens_ipow(dx, 2) + 0.10657 *y*dy + 1.6659 *lens_ipow(dy, 2) + 0.033149 *x*dx + 3.43354e-06 *lens_ipow(y, 4)*lambda + -8.32325e-08 *lens_ipow(y, 6) + -7.96945e-07 *x*lens_ipow(y, 4)*dx + -2.00979e-07 *lens_ipow(x, 4)*lens_ipow(y, 2) + -1.46738e-06 *lens_ipow(x, 4)*y*dy + 6.04406e-08 *lens_ipow(x, 4)*lens_ipow(y, 2)*lambda + -5.45356e-11 *lens_ipow(x, 8) + -1.16271e-08 *lens_ipow(y, 7)*dy + 4.17956e-07 *lens_ipow(x, 4)*lens_ipow(y, 2)*lens_ipow(dx, 2) + -1.76224e-09 *lens_ipow(x, 2)*lens_ipow(y, 6) + 1.70727e-10 *lens_ipow(x, 8)*lens_ipow(dx, 2) + -2.33556e-10 *lens_ipow(x, 2)*lens_ipow(y, 7)*dy + -8.37772e-13 *lens_ipow(y, 10) + 5.31064e-10 *lens_ipow(y, 8)*lens_ipow(dx, 2) + 5.13088e-09 *lens_ipow(x, 3)*lens_ipow(y, 5)*dx*dy+0.0f;
const float dx12 =  + 0.976401 *y*dx + 1.1315 *x*dy + 0.033149 *x*y + 20.6537 *dx*dy + -1.59389e-07 *x*lens_ipow(y, 5) + 2.78637e-07 *lens_ipow(x, 4)*lens_ipow(y, 3)*dx + 3.41454e-10 *lens_ipow(x, 8)*y*dx + 1.18014e-10 *lens_ipow(y, 9)*dx + 8.55147e-10 *lens_ipow(x, 3)*lens_ipow(y, 6)*dy + -0.000604368 *lens_ipow(x, 5)*lens_ipow(dx, 2)*lens_ipow(dy, 3)+0.0f;
const float dx13 =  + 24.0428  + 0.0532851 *lens_ipow(y, 2) + 3.3318 *y*dy + 1.1315 *x*dx + 10.3268 *lens_ipow(dx, 2) + 0.0189151 *lens_ipow(x, 2) + 31.944 *lens_ipow(dy, 2) + -7.33692e-07 *lens_ipow(x, 4)*lens_ipow(y, 2) + -1.45339e-09 *lens_ipow(y, 8) + -2.91946e-11 *lens_ipow(x, 2)*lens_ipow(y, 8) + -1.60411e-12 *lens_ipow(x, 10) + 8.55147e-10 *lens_ipow(x, 3)*lens_ipow(y, 6)*dx + -0.000604368 *lens_ipow(x, 5)*lens_ipow(dx, 3)*lens_ipow(dy, 2)+0.0f;
const float dx14 =  + -0.014603 *y + 6.86709e-07 *lens_ipow(y, 5) + 2.01469e-08 *lens_ipow(x, 4)*lens_ipow(y, 3)+0.0f;
const float dx20 =  + -0.00976452  + -0.00679202 *lambda + 0.00443152 *y*dy + 0.0127583 *x*dx + 6.34639e-05 *lens_ipow(y, 2) + 0.000190942 *lens_ipow(x, 2) + 0.0312271 *lens_ipow(dy, 2) + 0.0963793 *lens_ipow(dx, 2) + -0.0065923 *y*lens_ipow(dx, 2)*dy + -0.000693111 *x*y*dx*dy + 0.000328554 *lens_ipow(x, 2)*lens_ipow(dx, 2)*lambda + 3.78871e-07 *lens_ipow(x, 5)*dx + -6.11368e-09 *lens_ipow(x, 2)*lens_ipow(y, 4) + 3.1086e-06 *lens_ipow(x, 4)*lens_ipow(dy, 2) + -0.000326523 *lens_ipow(x, 2)*y*lens_ipow(dy, 5) + -4.27484e-12 *lens_ipow(y, 8) + -1.39461e-10 *lens_ipow(x, 6)*lens_ipow(y, 2) + -1.94804e-09 *lens_ipow(x, 7)*dx + -2.56414e-09 *lens_ipow(x, 5)*lens_ipow(y, 2)*dx*lambda + -1.82884e-13 *lens_ipow(x, 10) + -6.7111e-13 *lens_ipow(x, 4)*lens_ipow(y, 6)+0.0f;
const float dx21 =  + 0.00443152 *x*dy + 0.000126928 *x*y + 0.00384287 *y*dx + 0.197062 *dx*dy*lambda + -0.0065923 *x*lens_ipow(dx, 2)*dy + -0.168223 *dx*dy*lens_ipow(lambda, 2) + -0.000346556 *lens_ipow(x, 2)*dx*dy + -8.15157e-09 *lens_ipow(x, 3)*lens_ipow(y, 3) + -0.000108841 *lens_ipow(x, 3)*lens_ipow(dy, 5) + -3.41988e-11 *x*lens_ipow(y, 7) + -3.98459e-11 *lens_ipow(x, 7)*y + -8.54715e-10 *lens_ipow(x, 6)*y*dx*lambda + -8.05332e-13 *lens_ipow(x, 5)*lens_ipow(y, 5)+0.0f;
const float dx22 =  + 1.07844  + -0.243874 *lambda + 0.00637913 *lens_ipow(x, 2) + 0.192759 *x*dx + 0.00192144 *lens_ipow(y, 2) + 1.29951 *lens_ipow(dx, 2)*lambda + 0.197062 *y*dy*lambda + -0.0131846 *x*y*dx*dy + -0.168223 *y*dy*lens_ipow(lambda, 2) + -0.000346556 *lens_ipow(x, 2)*y*dy + 0.000219036 *lens_ipow(x, 3)*dx*lambda + 6.31452e-08 *lens_ipow(x, 6) + -25.6999 *lens_ipow(dx, 6)*lambda + -2.43505e-10 *lens_ipow(x, 8) + -4.27357e-10 *lens_ipow(x, 6)*lens_ipow(y, 2)*lambda+0.0f;
const float dx23 =  + 0.00443152 *x*y + 0.0624542 *x*dy + 0.197062 *y*dx*lambda + -0.0065923 *x*y*lens_ipow(dx, 2) + -0.168223 *y*dx*lens_ipow(lambda, 2) + -0.000346556 *lens_ipow(x, 2)*y*dx + 1.24344e-06 *lens_ipow(x, 5)*dy + -0.000544205 *lens_ipow(x, 3)*y*lens_ipow(dy, 4)+0.0f;
const float dx24 =  + -0.00679202 *x + -0.243874 *dx + 0.433169 *lens_ipow(dx, 3) + 0.197062 *y*dx*dy + -0.336445 *y*dx*dy*lambda + 0.000109518 *lens_ipow(x, 3)*lens_ipow(dx, 2) + -3.67141 *lens_ipow(dx, 7) + -4.27357e-10 *lens_ipow(x, 6)*lens_ipow(y, 2)*dx+0.0f;
const float dx30 =  + 0.0743635 *dx*dy + 0.00493618 *y*dx + 0.000139024 *x*y + 0.00437051 *x*dy + -4.31138e-09 *lens_ipow(x, 5)*y + 1.53205e-08 *lens_ipow(y, 5)*dx + -1.319e-10 *lens_ipow(x, 3)*lens_ipow(y, 5) + -5.54229e-08 *lens_ipow(x, 2)*lens_ipow(y, 4)*dx*dy + -2.59752e-11 *x*lens_ipow(y, 7) + -3.65971e-09 *lens_ipow(x, 3)*lens_ipow(y, 4)*dy*lambda + -5.63602e-13 *lens_ipow(x, 7)*lens_ipow(y, 3) + -9.39441e-09 *lens_ipow(x, 2)*lens_ipow(y, 5)*lens_ipow(dx, 3)+0.0f;
const float dx31 =  + -0.00698832  + -0.0153323 *lambda + 0.0418371 *lens_ipow(dx, 2) + 0.0152519 *y*dy + 0.128823 *lens_ipow(dy, 2) + 0.00493618 *x*dx + 6.95118e-05 *lens_ipow(x, 2) + 0.000219061 *lens_ipow(y, 2) + 0.00918914 *lens_ipow(lambda, 3) + -7.18563e-10 *lens_ipow(x, 6) + 7.66024e-08 *x*lens_ipow(y, 4)*dx + 1.99984e-08 *lens_ipow(y, 6)*lens_ipow(dx, 2) + -3.66757e-11 *lens_ipow(y, 8) + -1.64874e-10 *lens_ipow(x, 4)*lens_ipow(y, 4) + -7.38972e-08 *lens_ipow(x, 3)*lens_ipow(y, 3)*dx*dy + -9.09132e-11 *lens_ipow(x, 2)*lens_ipow(y, 6) + -3.65971e-09 *lens_ipow(x, 4)*lens_ipow(y, 3)*dy*lambda + -5.12661e-10 *lens_ipow(y, 7)*dy*lens_ipow(lambda, 2) + -2.11351e-13 *lens_ipow(x, 8)*lens_ipow(y, 2) + -1.56573e-08 *lens_ipow(x, 3)*lens_ipow(y, 4)*lens_ipow(dx, 3)+0.0f;
const float dx32 =  + 0.0836742 *y*dx + 0.0743635 *x*dy + 0.00493618 *x*y + 0.693792 *dx*dy + 1.53205e-08 *x*lens_ipow(y, 5) + 5.71383e-09 *lens_ipow(y, 7)*dx + -1.84743e-08 *lens_ipow(x, 3)*lens_ipow(y, 4)*dy + -9.39441e-09 *lens_ipow(x, 3)*lens_ipow(y, 5)*lens_ipow(dx, 2) + -410.518 *dx*lens_ipow(dy, 9)+0.0f;
const float dx33 =  + 1.25591  + -0.955525 *lambda + 0.00762595 *lens_ipow(y, 2) + 0.257646 *y*dy + 0.0743635 *x*dx + 0.346896 *lens_ipow(dx, 2) + 0.653258 *lens_ipow(lambda, 2) + 0.00218526 *lens_ipow(x, 2) + 1.35668 *lens_ipow(dy, 2) + -1.84743e-08 *lens_ipow(x, 3)*lens_ipow(y, 4)*dx + -9.14928e-10 *lens_ipow(x, 4)*lens_ipow(y, 4)*lambda + -6.40826e-11 *lens_ipow(y, 8)*lens_ipow(lambda, 2) + -1847.33 *lens_ipow(dx, 2)*lens_ipow(dy, 8)+0.0f;
const float dx34 =  + -0.955525 *dy + -0.0153323 *y + 1.30652 *dy*lambda + 0.0275674 *y*lens_ipow(lambda, 2) + -9.14928e-10 *lens_ipow(x, 4)*lens_ipow(y, 4)*dy + -1.28165e-10 *lens_ipow(y, 8)*dy*lambda+0.0f;
const float dx40 =  + -0.000157557 *x*y*dy + -5.90412e-05 *lens_ipow(y, 2)*dx + -8.81e-06 *x*lens_ipow(y, 2) + -6.08751e-06 *lens_ipow(x, 3) + 0.000690269 *x*y*lens_ipow(dx, 2)*dy + 0.000234249 *lens_ipow(y, 2)*dx*lens_ipow(dy, 2) + -2.14966e-06 *lens_ipow(x, 2)*lens_ipow(y, 2)*dx + -3.51611e-06 *lens_ipow(x, 4)*dx + -1.31914e-05 *lens_ipow(x, 3)*lens_ipow(dy, 2) + -1.15701e-09 *lens_ipow(y, 6)*dx + -8.10839e-10 *lens_ipow(x, 3)*lens_ipow(y, 4) + -1.93181e-08 *lens_ipow(x, 3)*lens_ipow(y, 3)*dy + -5.94649e-10 *lens_ipow(x, 5)*lens_ipow(y, 2) + -6.82335e-07 *lens_ipow(x, 5)*lens_ipow(dx, 2) + -3.22772e-10 *lens_ipow(x, 7) + 2.62979e-09 *lens_ipow(x, 7)*lens_ipow(dx, 2) + -3.65715e-11 *lens_ipow(x, 7)*y*dy + -7.81912e-13 *x*lens_ipow(y, 8)*lambda+0.0f;
const float dx41 =  + -0.00103722 *y*lens_ipow(dx, 2) + -7.87787e-05 *lens_ipow(x, 2)*dy + -0.000118082 *x*y*dx + -8.81e-06 *lens_ipow(x, 2)*y + -0.00117915 *y*lens_ipow(dy, 2) + 0.000345135 *lens_ipow(x, 2)*lens_ipow(dx, 2)*dy + 0.000468498 *x*y*dx*lens_ipow(dy, 2) + -1.43311e-06 *lens_ipow(x, 3)*y*dx + -3.91399e-06 *lens_ipow(y, 4)*dy + -1.24459e-07 *lens_ipow(y, 5) + -6.94205e-09 *x*lens_ipow(y, 5)*dx + -8.10839e-10 *lens_ipow(x, 4)*lens_ipow(y, 3) + -1.44886e-08 *lens_ipow(x, 4)*lens_ipow(y, 2)*dy + -1.98216e-10 *lens_ipow(x, 6)*y + -2.5408e-07 *lens_ipow(y, 5)*lens_ipow(dy, 2) + 1.63985e-10 *lens_ipow(y, 7) + -4.57144e-12 *lens_ipow(x, 8)*dy + -3.12765e-12 *lens_ipow(x, 2)*lens_ipow(y, 7)*lambda+0.0f;
const float dx42 =  + -0.00103722 *lens_ipow(y, 2)*dx + -5.90412e-05 *x*lens_ipow(y, 2) + 0.000690269 *lens_ipow(x, 2)*y*dx*dy + 0.000234249 *x*lens_ipow(y, 2)*lens_ipow(dy, 2) + -7.16553e-07 *lens_ipow(x, 3)*lens_ipow(y, 2) + -7.03221e-07 *lens_ipow(x, 5) + -1.15701e-09 *x*lens_ipow(y, 6) + -2.27445e-07 *lens_ipow(x, 6)*dx + 6.57448e-10 *lens_ipow(x, 8)*dx+0.0f;
const float dx43 =  + -7.87787e-05 *lens_ipow(x, 2)*y + -0.00117915 *lens_ipow(y, 2)*dy + 0.000345135 *lens_ipow(x, 2)*y*lens_ipow(dx, 2) + 0.000468498 *x*lens_ipow(y, 2)*dx*dy + -6.59569e-06 *lens_ipow(x, 4)*dy + -7.82797e-07 *lens_ipow(y, 5) + -4.82953e-09 *lens_ipow(x, 4)*lens_ipow(y, 3) + -8.46934e-08 *lens_ipow(y, 6)*dy + -4.57144e-12 *lens_ipow(x, 8)*y+0.0f;
const float dx44 =  + 2.2675  + -9.26438 *lambda + 13.4295 *lens_ipow(lambda, 2) + -6.72933 *lens_ipow(lambda, 3) + -3.90956e-13 *lens_ipow(x, 2)*lens_ipow(y, 8)+0.0f;
