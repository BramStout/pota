const float dx00 =  + 0.620268  + -0.0997683 *lambda + 0.0779104 *y*dy + 0.22064 *x*dx + 0.066893 *lens_ipow(lambda, 2) + 0.00114721 *lens_ipow(y, 2) + 0.00312843 *lens_ipow(x, 2) + 1.05782 *lens_ipow(dy, 2) + 3.30806 *lens_ipow(dx, 2) + 0.00106397 *lens_ipow(x, 3)*dx + 17.5869 *lens_ipow(dx, 4) + 1.69807 *x*lens_ipow(dx, 3) + 7.00682e-06 *lens_ipow(x, 4) + 0.062751 *lens_ipow(x, 2)*lens_ipow(dx, 2) + 3.2265e-12 *lens_ipow(x, 6)*lens_ipow(y, 4) + -1.91575e-08 *lens_ipow(x, 5)*lens_ipow(y, 3)*dx*dy+0.0f;
const float dx01 =  + 0.0779104 *x*dy + 0.00229443 *x*y + 0.504957 *y*dx*lambda + 15.3869 *dx*dy*lambda + -28.4185 *dx*dy*lens_ipow(lambda, 2) + -0.938856 *y*dx*lens_ipow(lambda, 2) + 17.1989 *dx*dy*lens_ipow(lambda, 3) + 0.571445 *y*dx*lens_ipow(lambda, 3) + 1.84372e-12 *lens_ipow(x, 7)*lens_ipow(y, 3) + -9.57876e-09 *lens_ipow(x, 6)*lens_ipow(y, 2)*dx*dy+0.0f;
const float dx02 =  + 33.436  + -1.02423 *lambda + 0.11032 *lens_ipow(x, 2) + 66.9774 *lens_ipow(dx, 2) + 28.7753 *lens_ipow(dy, 2) + 6.61613 *x*dx + 0.622831 *lens_ipow(lambda, 3) + 0.252479 *lens_ipow(y, 2)*lambda + 15.3869 *y*dy*lambda + 0.000265991 *lens_ipow(x, 4) + 70.3475 *x*lens_ipow(dx, 3) + 2.5471 *lens_ipow(x, 2)*lens_ipow(dx, 2) + -28.4185 *y*dy*lens_ipow(lambda, 2) + 738.725 *lens_ipow(dx, 4) + -0.469428 *lens_ipow(y, 2)*lens_ipow(lambda, 2) + 0.041834 *lens_ipow(x, 3)*dx + 17.1989 *y*dy*lens_ipow(lambda, 3) + 0.285723 *lens_ipow(y, 2)*lens_ipow(lambda, 3) + -3.19292e-09 *lens_ipow(x, 6)*lens_ipow(y, 3)*dy+0.0f;
const float dx03 =  + 0.0779104 *x*y + 57.5505 *dx*dy + 2.11564 *x*dy + 15.3869 *y*dx*lambda + -28.4185 *y*dx*lens_ipow(lambda, 2) + 17.1989 *y*dx*lens_ipow(lambda, 3) + -3.19292e-09 *lens_ipow(x, 6)*lens_ipow(y, 3)*dx+0.0f;
const float dx04 =  + -0.0997683 *x + -1.02423 *dx + 0.133786 *x*lambda + 1.86849 *dx*lens_ipow(lambda, 2) + 0.252479 *lens_ipow(y, 2)*dx + 15.3869 *y*dx*dy + -56.837 *y*dx*dy*lambda + -0.938856 *lens_ipow(y, 2)*dx*lambda + 51.5966 *y*dx*dy*lens_ipow(lambda, 2) + 0.857168 *lens_ipow(y, 2)*dx*lens_ipow(lambda, 2)+0.0f;
const float dx10 =  + 2.71107 *dx*dy + 0.0773918 *y*dx + 0.00227935 *x*y + 0.0885285 *x*dy + 7.77217e-09 *lens_ipow(y, 7)*dx*lambda + 6.4896e-13 *x*lens_ipow(y, 9) + 2.05952e-12 *lens_ipow(x, 7)*lens_ipow(y, 3) + 6.2086e-07 *lens_ipow(y, 6)*dx*dy*lens_ipow(lambda, 2)+0.0f;
const float dx11 =  + 0.620382  + -0.0988428 *lambda + 1.03903 *lens_ipow(dx, 2) + 0.217703 *y*dy + 3.26034 *lens_ipow(dy, 2) + 0.0773918 *x*dx + 0.0661776 *lens_ipow(lambda, 2) + 0.00113968 *lens_ipow(x, 2) + 0.00308216 *lens_ipow(y, 2) + 0.00121637 *lens_ipow(y, 3)*dy + 1.84178 *y*lens_ipow(dy, 3) + 18.733 *lens_ipow(dy, 4) + 7.95251e-06 *lens_ipow(y, 4) + 0.0699741 *lens_ipow(y, 2)*lens_ipow(dy, 2) + 4.7382e-05 *lens_ipow(y, 4)*lens_ipow(dx, 2) + 0.00165669 *lens_ipow(y, 3)*lens_ipow(dx, 2)*dy + 5.44052e-08 *x*lens_ipow(y, 6)*dx*lambda + 2.92032e-12 *lens_ipow(x, 2)*lens_ipow(y, 8) + 7.7232e-13 *lens_ipow(x, 8)*lens_ipow(y, 2) + 3.72516e-06 *x*lens_ipow(y, 5)*dx*dy*lens_ipow(lambda, 2)+0.0f;
const float dx12 =  + 2.07807 *y*dx + 2.71107 *x*dy + 0.0773918 *x*y + 56.5856 *dx*dy + 1.89528e-05 *lens_ipow(y, 5)*dx + 0.000828343 *lens_ipow(y, 4)*dx*dy + 7.77217e-09 *x*lens_ipow(y, 7)*lambda + 6.2086e-07 *x*lens_ipow(y, 6)*dy*lens_ipow(lambda, 2)+0.0f;
const float dx13 =  + 33.2697  + 0.108851 *lens_ipow(y, 2) + 6.52068 *y*dy + 2.71107 *x*dx + 28.2928 *lens_ipow(dx, 2) + -1.94549 *lens_ipow(lambda, 2) + 0.0442643 *lens_ipow(x, 2) + 65.1857 *lens_ipow(dy, 2) + 1.83525 *lens_ipow(lambda, 3) + 0.000304092 *lens_ipow(y, 4) + 784.387 *lens_ipow(dy, 4) + 2.76267 *lens_ipow(y, 2)*lens_ipow(dy, 2) + 74.9321 *y*lens_ipow(dy, 3) + 0.0466494 *lens_ipow(y, 3)*dy + 0.000414172 *lens_ipow(y, 4)*lens_ipow(dx, 2) + 6.2086e-07 *x*lens_ipow(y, 6)*dx*lens_ipow(lambda, 2)+0.0f;
const float dx14 =  + -0.0988428 *y + 0.132355 *y*lambda + -3.89098 *dy*lambda + 5.50575 *dy*lens_ipow(lambda, 2) + 7.77217e-09 *x*lens_ipow(y, 7)*dx + 1.24172e-06 *x*lens_ipow(y, 6)*dx*dy*lambda+0.0f;
const float dx20 =  + -0.028575  + -0.00932014 *lambda + 0.00406068 *x*dx + 0.00683675 *lens_ipow(lambda, 2) + 3.22939e-05 *lens_ipow(y, 2) + 0.000106003 *lens_ipow(x, 2) + -0.0206119 *lens_ipow(dy, 2) + -0.0612014 *lens_ipow(dx, 2) + -0.0284093 *lens_ipow(dx, 2)*lambda + -7.7071e-06 *lens_ipow(y, 2)*lambda + -4.42994e-05 *lens_ipow(x, 2)*lambda + 0.00842516 *y*dy*lambda + -0.00241827 *x*dx*lambda + -0.0171832 *y*dy*lens_ipow(lambda, 2) + 0.0109504 *y*dy*lens_ipow(lambda, 3) + 1.53164e-13 *lens_ipow(x, 10) + 5.60108e-11 *lens_ipow(x, 6)*lens_ipow(y, 3)*dy + 1.98891e-12 *lens_ipow(x, 6)*lens_ipow(y, 4) + 1.22356e-11 *lens_ipow(x, 9)*dx + 9.75161e-11 *lens_ipow(x, 5)*lens_ipow(y, 4)*dx+0.0f;
const float dx21 =  + -0.0549223 *dx*dy + 6.45878e-05 *x*y + 0.000344154 *y*dx + -1.54142e-05 *x*y*lambda + 0.00842516 *x*dy*lambda + -0.0171832 *x*dy*lens_ipow(lambda, 2) + 0.0109504 *x*dy*lens_ipow(lambda, 3) + 2.40046e-11 *lens_ipow(x, 7)*lens_ipow(y, 2)*dy + 1.13652e-12 *lens_ipow(x, 7)*lens_ipow(y, 3) + 6.50108e-11 *lens_ipow(x, 6)*lens_ipow(y, 3)*dx+0.0f;
const float dx22 =  + -0.0549223 *y*dy + 0.00203034 *lens_ipow(x, 2) + -9.70139 *lens_ipow(dx, 2) + -0.122403 *x*dx + 0.000172077 *lens_ipow(y, 2) + -0.51415 *lens_ipow(lambda, 2) + -0.0568186 *x*dx*lambda + 0.50677 *lens_ipow(lambda, 3) + -0.00120913 *lens_ipow(x, 2)*lambda + -17.3322 *lens_ipow(dy, 2)*lambda + 25.3256 *lens_ipow(dy, 2)*lens_ipow(lambda, 2) + -14.6692 *lens_ipow(dy, 2)*lens_ipow(lambda, 4) + 1.22356e-12 *lens_ipow(x, 10) + 1.62527e-11 *lens_ipow(x, 6)*lens_ipow(y, 4)+0.0f;
const float dx23 =  + -0.0549223 *y*dx + -0.0412237 *x*dy + 0.00842516 *x*y*lambda + -34.6644 *dx*dy*lambda + 50.6513 *dx*dy*lens_ipow(lambda, 2) + -0.0171832 *x*y*lens_ipow(lambda, 2) + 0.0109504 *x*y*lens_ipow(lambda, 3) + -29.3385 *dx*dy*lens_ipow(lambda, 4) + 8.00155e-12 *lens_ipow(x, 7)*lens_ipow(y, 3)+0.0f;
const float dx24 =  + -0.00932014 *x + 0.0136735 *x*lambda + -1.0283 *dx*lambda + -0.0284093 *x*lens_ipow(dx, 2) + 1.52031 *dx*lens_ipow(lambda, 2) + -7.7071e-06 *x*lens_ipow(y, 2) + -1.47665e-05 *lens_ipow(x, 3) + 0.00842516 *x*y*dy + -0.00120913 *lens_ipow(x, 2)*dx + -17.3322 *dx*lens_ipow(dy, 2) + 50.6513 *dx*lens_ipow(dy, 2)*lambda + -0.0343663 *x*y*dy*lambda + 0.0328513 *x*y*dy*lens_ipow(lambda, 2) + -58.6769 *dx*lens_ipow(dy, 2)*lens_ipow(lambda, 3)+0.0f;
const float dx30 =  + -0.0548905 *dx*dy + 0.00124677 *y*dx + 5.54049e-05 *x*y + 0.000390642 *x*dy + -0.0076971 *x*lens_ipow(dy, 3)*lens_ipow(lambda, 2) + 7.52502e-09 *lens_ipow(x, 3)*lens_ipow(y, 4)*dy*lambda + 8.54365e-13 *lens_ipow(x, 7)*lens_ipow(y, 3) + 2.00707e-11 *lens_ipow(x, 2)*lens_ipow(y, 7)*dx + 4.63905e-11 *lens_ipow(x, 6)*lens_ipow(y, 3)*dx + 8.95666e-13 *lens_ipow(x, 3)*lens_ipow(y, 7)+0.0f;
const float dx31 =  + -0.028835  + -0.00834163 *lambda + -0.0206117 *lens_ipow(dx, 2) + 0.00401252 *y*dy + -0.0624634 *lens_ipow(dy, 2) + 0.00124677 *x*dx + 0.00594847 *lens_ipow(lambda, 2) + 2.77024e-05 *lens_ipow(x, 2) + 0.00010523 *lens_ipow(y, 2) + -0.0275655 *lens_ipow(dy, 2)*lambda + -0.0025378 *y*dy*lambda + -4.43251e-05 *lens_ipow(y, 2)*lambda + 3.94064e-09 *lens_ipow(y, 7)*dy + 2.8231e-11 *lens_ipow(y, 8) + 7.52502e-09 *lens_ipow(x, 4)*lens_ipow(y, 3)*dy*lambda + 1.30727e-09 *lens_ipow(y, 8)*lens_ipow(dy, 2) + 3.20387e-13 *lens_ipow(x, 8)*lens_ipow(y, 2) + 4.68316e-11 *lens_ipow(x, 3)*lens_ipow(y, 6)*dx + 1.98817e-11 *lens_ipow(x, 7)*lens_ipow(y, 2)*dx + 1.56742e-12 *lens_ipow(x, 4)*lens_ipow(y, 6)+0.0f;
const float dx32 =  + -0.0412235 *y*dx + -0.0548905 *x*dy + 0.00124677 *x*y + -6.4302 *dx*dy + 6.69022e-12 *lens_ipow(x, 3)*lens_ipow(y, 7) + 6.62722e-12 *lens_ipow(x, 7)*lens_ipow(y, 3)+0.0f;
const float dx33 =  + 0.0581261  + -0.382108 *lambda + 0.00200626 *lens_ipow(y, 2) + -0.124927 *y*dy + -0.0548905 *x*dx + -3.2151 *lens_ipow(dx, 2) + 0.266371 *lens_ipow(lambda, 2) + 0.000195321 *lens_ipow(x, 2) + -9.61844 *lens_ipow(dy, 2) + -0.055131 *y*dy*lambda + -0.0012689 *lens_ipow(y, 2)*lambda + -0.0115457 *lens_ipow(x, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + 4.9258e-10 *lens_ipow(y, 8) + 1.88125e-09 *lens_ipow(x, 4)*lens_ipow(y, 4)*lambda + 2.90505e-10 *lens_ipow(y, 9)*dy+0.0f;
const float dx34 =  + -0.382108 *dy + -0.00834163 *y + 0.0118969 *y*lambda + 0.532743 *dy*lambda + -0.0275655 *y*lens_ipow(dy, 2) + -0.0012689 *lens_ipow(y, 2)*dy + -1.4775e-05 *lens_ipow(y, 3) + -0.0076971 *lens_ipow(x, 2)*lens_ipow(dy, 3)*lambda + 1.88125e-09 *lens_ipow(x, 4)*lens_ipow(y, 4)*dy+0.0f;
const float dx40 =  + -0.00134272 *dx + -2.72107e-05 *x + -8.06195e-06 *x*y*dy + -5.28168e-07 *x*lens_ipow(y, 2) + -1.6964e-05 *lens_ipow(x, 2)*dx + -6.3771e-07 *lens_ipow(x, 3) + -0.000130857 *lens_ipow(y, 2)*lens_ipow(dx, 3) + -0.000772398 *x*lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 2) + 0.000223587 *lens_ipow(y, 3)*lens_ipow(dx, 3)*dy + 0.000395586 *lens_ipow(x, 2)*y*dx*lens_ipow(dy, 3)+0.0f;
const float dx41 =  + -0.00126427 *dy + -3.94815e-05 *y + -0.0107331 *lens_ipow(dy, 3) + 0.000722629 *y*lens_ipow(dx, 2) + -4.03098e-06 *lens_ipow(x, 2)*dy + -5.28168e-07 *lens_ipow(x, 2)*y + -0.000261715 *x*y*lens_ipow(dx, 3) + -0.0133499 *y*lens_ipow(dx, 4) + -7.74501e-06 *lens_ipow(y, 3)*lens_ipow(dx, 2) + -0.000772398 *lens_ipow(x, 2)*y*lens_ipow(dx, 2)*lens_ipow(dy, 2) + 0.000670761 *x*lens_ipow(y, 2)*lens_ipow(dx, 3)*dy + -9.31114e-11 *lens_ipow(y, 7) + 0.000131862 *lens_ipow(x, 3)*dx*lens_ipow(dy, 3) + -2.36225e-09 *lens_ipow(y, 7)*lens_ipow(dy, 2) + -8.36642e-11 *lens_ipow(y, 8)*dy+0.0f;
const float dx42 =  + -0.00134272 *x + -0.0752861 *dx + 0.000722629 *lens_ipow(y, 2)*dx + -5.65467e-06 *lens_ipow(x, 3) + -0.447606 *dx*lens_ipow(dy, 2)*lambda + -0.000392572 *x*lens_ipow(y, 2)*lens_ipow(dx, 2) + -0.0266998 *lens_ipow(y, 2)*lens_ipow(dx, 3) + -3.87251e-06 *lens_ipow(y, 4)*dx + -0.000772398 *lens_ipow(x, 2)*lens_ipow(y, 2)*dx*lens_ipow(dy, 2) + 0.000670761 *x*lens_ipow(y, 3)*lens_ipow(dx, 2)*dy + 0.000131862 *lens_ipow(x, 3)*y*lens_ipow(dy, 3)+0.0f;
const float dx43 =  + -0.00126427 *y + -0.0568887 *dy + -0.0321993 *y*lens_ipow(dy, 2) + -4.03098e-06 *lens_ipow(x, 2)*y + -1.16506 *lens_ipow(dy, 3) + -0.447606 *lens_ipow(dx, 2)*dy*lambda + -0.000772398 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dx, 2)*dy + 0.000223587 *x*lens_ipow(y, 3)*lens_ipow(dx, 3) + 0.000395586 *lens_ipow(x, 3)*y*dx*lens_ipow(dy, 2) + -5.90562e-10 *lens_ipow(y, 8)*dy + -9.29602e-12 *lens_ipow(y, 9)+0.0f;
const float dx44 =  + 1.70454  + -7.0625 *lambda + 10.3325 *lens_ipow(lambda, 2) + -5.21056 *lens_ipow(lambda, 3) + -0.223803 *lens_ipow(dx, 2)*lens_ipow(dy, 2)+0.0f;
