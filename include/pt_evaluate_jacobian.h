const float dx00 =  + -0.621577  + 0.674235 *lambda + 0.00612017 *y*dy + 0.0370704 *x*dx + -0.526696 *lens_ipow(lambda, 2) + -0.00135091 *lens_ipow(y, 2) + -0.00361239 *lens_ipow(x, 2) + 0.265561 *lens_ipow(dy, 2) + 0.547505 *lens_ipow(dx, 2) + 0.000620579 *lens_ipow(y, 2)*lambda + 0.00150407 *lens_ipow(x, 2)*lambda + 0.0777405 *y*lens_ipow(dx, 2)*dy + -0.000168337 *lens_ipow(x, 3)*dx + -0.00626866 *lens_ipow(x, 2)*lens_ipow(dx, 2) + -4.49517e-06 *lens_ipow(y, 4)*lens_ipow(dx, 2) + -2.85574e-08 *lens_ipow(x, 2)*lens_ipow(y, 4) + -2.42278e-08 *lens_ipow(x, 6) + -7.05762e-12 *lens_ipow(y, 8) + -4.34237e-10 *lens_ipow(x, 6)*lens_ipow(y, 2) + 1.20071e-12 *lens_ipow(x, 8)*lens_ipow(y, 2)+0.0f;
const float dx01 =  + 0.214431 *dx*dy + 0.00612017 *x*dy + -0.00270181 *x*y + 0.00124116 *x*y*lambda + 0.0183112 *y*dx*lambda + 0.0777405 *x*lens_ipow(dx, 2)*dy + -0.00326267 *lens_ipow(y, 2)*dx*dy + 0.0579972 *y*dx*lens_ipow(dy, 2) + -1.79807e-05 *x*lens_ipow(y, 3)*lens_ipow(dx, 2) + -3.80765e-08 *lens_ipow(x, 3)*lens_ipow(y, 3) + -5.64609e-11 *x*lens_ipow(y, 7) + -1.24068e-10 *lens_ipow(x, 7)*y + 0.0855227 *lens_ipow(y, 2)*lens_ipow(dx, 3)*dy*lens_ipow(lambda, 4) + 2.66824e-13 *lens_ipow(x, 9)*y+0.0f;
const float dx02 =  + 49.6109  + 0.214431 *y*dy + 0.0185352 *lens_ipow(x, 2) + -57.2285 *lens_ipow(dx, 2) + -19.997 *lens_ipow(dy, 2) + 1.09501 *x*dx + 0.00915562 *lens_ipow(y, 2)*lambda + 0.155481 *x*y*dx*dy + -4.20841e-05 *lens_ipow(x, 4) + -0.00108756 *lens_ipow(y, 3)*dy + 0.0289986 *lens_ipow(y, 2)*lens_ipow(dy, 2) + -0.00417911 *lens_ipow(x, 3)*dx + -8.99034e-06 *x*lens_ipow(y, 4)*dx + 0.0855227 *lens_ipow(y, 3)*lens_ipow(dx, 2)*dy*lens_ipow(lambda, 4)+0.0f;
const float dx03 =  + 0.214431 *y*dx + 0.00612017 *x*y + -39.994 *dx*dy + 0.531123 *x*dy + 0.0777405 *x*y*lens_ipow(dx, 2) + -0.00108756 *lens_ipow(y, 3)*dx + 0.0579972 *lens_ipow(y, 2)*dx*dy + 0.0285076 *lens_ipow(y, 3)*lens_ipow(dx, 3)*lens_ipow(lambda, 4)+0.0f;
const float dx04 =  + 0.674235 *x + -1.05339 *x*lambda + 0.000620579 *x*lens_ipow(y, 2) + 0.000501355 *lens_ipow(x, 3) + 0.00915562 *lens_ipow(y, 2)*dx + 0.11403 *lens_ipow(y, 3)*lens_ipow(dx, 3)*dy*lens_ipow(lambda, 3)+0.0f;
const float dx10 =  + 0.00701796 *y*dx + -0.0026675 *x*y + 0.0211912 *x*dy*lambda + 0.333688 *dx*dy*lambda + 0.00128159 *x*y*lambda + 0.156726 *y*dx*lens_ipow(dy, 2)*lambda + 0.00107832 *lens_ipow(x, 3)*lens_ipow(dx, 2)*dy + -4.62209e-07 *lens_ipow(x, 2)*lens_ipow(y, 3)*dx + -1.63664e-08 *lens_ipow(x, 5)*y + -1.63069e-08 *x*lens_ipow(y, 5) + -3.47016e-08 *lens_ipow(x, 3)*lens_ipow(y, 3)+0.0f;
const float dx11 =  + -0.613564  + 0.669005 *lambda + 0.246172 *lens_ipow(dx, 2) + 0.0253654 *y*dy + 0.232757 *lens_ipow(dy, 2) + 0.00701796 *x*dx + -0.524051 *lens_ipow(lambda, 2) + -0.00133375 *lens_ipow(x, 2) + -0.00381557 *lens_ipow(y, 2) + 0.00163384 *lens_ipow(y, 2)*lambda + 0.000640797 *lens_ipow(x, 2)*lambda + -6.81483e-05 *lens_ipow(y, 3)*dy + 0.156726 *x*dx*lens_ipow(dy, 2)*lambda + 2.94679 *lens_ipow(dy, 4)*lambda + 0.257731 *y*lens_ipow(dy, 3)*lambda + -2.1714e-08 *lens_ipow(y, 6) + -4.62209e-07 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx + -2.72774e-09 *lens_ipow(x, 6) + 5.47118 *lens_ipow(dx, 4)*lens_ipow(dy, 2) + -4.07672e-08 *lens_ipow(x, 2)*lens_ipow(y, 4) + -2.60262e-08 *lens_ipow(x, 4)*lens_ipow(y, 2)+0.0f;
const float dx12 =  + 0.492344 *y*dx + 0.00701796 *x*y + -38.0953 *dx*dy + 0.333688 *x*dy*lambda + 0.156726 *x*y*lens_ipow(dy, 2)*lambda + 0.000539161 *lens_ipow(x, 4)*dx*dy + -1.5407e-07 *lens_ipow(x, 3)*lens_ipow(y, 3) + 21.8847 *y*lens_ipow(dx, 3)*lens_ipow(dy, 2)+0.0f;
const float dx13 =  + 49.7175  + 0.0126827 *lens_ipow(y, 2) + 0.465514 *y*dy + -19.0477 *lens_ipow(dx, 2) + -64.2773 *lens_ipow(dy, 2) + 0.0105956 *lens_ipow(x, 2)*lambda + 0.333688 *x*dx*lambda + -1.70371e-05 *lens_ipow(y, 4) + 0.313452 *x*y*dx*dy*lambda + 11.7872 *y*lens_ipow(dy, 3)*lambda + 0.386597 *lens_ipow(y, 2)*lens_ipow(dy, 2)*lambda + 0.000269581 *lens_ipow(x, 4)*lens_ipow(dx, 2) + 10.9424 *y*lens_ipow(dx, 4)*dy + 469.739 *lens_ipow(dy, 6)*lambda+0.0f;
const float dx14 =  + 0.669005 *y + -1.0481 *y*lambda + 0.0105956 *lens_ipow(x, 2)*dy + 0.000544614 *lens_ipow(y, 3) + 0.333688 *x*dx*dy + 0.000640797 *lens_ipow(x, 2)*y + 0.156726 *x*y*dx*lens_ipow(dy, 2) + 2.94679 *y*lens_ipow(dy, 4) + 0.128866 *lens_ipow(y, 2)*lens_ipow(dy, 3) + 67.1056 *lens_ipow(dy, 7)+0.0f;
const float dx20 =  + -0.0124033  + -0.00877929 *lambda + -6.4694e-05 *y*dy + -0.000196014 *x*dx + 0.00706724 *lens_ipow(lambda, 2) + 1.74459e-05 *lens_ipow(y, 2) + 5.31609e-05 *lens_ipow(x, 2) + -0.00111275 *lens_ipow(dy, 2) + -7.43443e-06 *lens_ipow(y, 2)*lambda + -2.21924e-05 *lens_ipow(x, 2)*lambda + -9.44267e-07 *lens_ipow(x, 3)*dx + 6.58747e-09 *lens_ipow(y, 4) + -3.09809e-07 *lens_ipow(y, 3)*dy + -0.00453847 *lens_ipow(dy, 4) + 7.27272e-05 *x*y*dx*dy + 0.00138703 *x*dx*lens_ipow(dy, 2) + 6.62735e-10 *lens_ipow(x, 4)*lens_ipow(y, 2) + -0.0485359 *lens_ipow(dx, 6) + 2.31544e-10 *lens_ipow(x, 6) + 1.3235e-12 *lens_ipow(x, 2)*lens_ipow(y, 6) + 0.0506785 *y*lens_ipow(dx, 4)*lens_ipow(dy, 3)*lambda+0.0f;
const float dx21 =  + -6.4694e-05 *x*dy + 3.48918e-05 *x*y + -1.48689e-05 *x*y*lambda + -4.3097e-07 *lens_ipow(y, 3)*dx + 2.63499e-08 *x*lens_ipow(y, 3) + -9.29426e-07 *x*lens_ipow(y, 2)*dy + 0.000724114 *y*lens_ipow(dx, 3) + 3.63636e-05 *lens_ipow(x, 2)*dx*dy + 2.65094e-10 *lens_ipow(x, 5)*y + 2.64699e-12 *lens_ipow(x, 3)*lens_ipow(y, 5) + 0.0506785 *x*lens_ipow(dx, 4)*lens_ipow(dy, 3)*lambda+0.0f;
const float dx22 =  + -0.614401  + 0.00908301 *lambda + -9.8007e-05 *lens_ipow(x, 2) + 0.915812 *lens_ipow(dx, 2) + 0.148208 *lens_ipow(dy, 2) + -2.36067e-07 *lens_ipow(x, 4) + -1.07743e-07 *lens_ipow(y, 4) + -1.44799 *lens_ipow(dx, 4) + 0.00108617 *lens_ipow(y, 2)*lens_ipow(dx, 2) + 3.63636e-05 *lens_ipow(x, 2)*y*dy + 0.000693516 *lens_ipow(x, 2)*lens_ipow(dy, 2) + -0.291215 *x*lens_ipow(dx, 5) + 0.202714 *x*y*lens_ipow(dx, 3)*lens_ipow(dy, 3)*lambda+0.0f;
const float dx23 =  + -6.4694e-05 *x*y + 0.296417 *dx*dy + -0.0022255 *x*dy + -3.09809e-07 *x*lens_ipow(y, 3) + -0.0181539 *x*lens_ipow(dy, 3) + 3.63636e-05 *lens_ipow(x, 2)*y*dx + 0.00138703 *lens_ipow(x, 2)*dx*dy + 0.152035 *x*y*lens_ipow(dx, 4)*lens_ipow(dy, 2)*lambda+0.0f;
const float dx24 =  + -0.00877929 *x + 0.00908301 *dx + 0.0141345 *x*lambda + -7.43443e-06 *x*lens_ipow(y, 2) + -7.39746e-06 *lens_ipow(x, 3) + 0.0506785 *x*y*lens_ipow(dx, 4)*lens_ipow(dy, 3)+0.0f;
const float dx30 =  + 0.00389116 *dx*dy + -0.000108381 *y*dx + 2.65468e-05 *x*y + 9.24149e-08 *lens_ipow(x, 3)*y + -1.60316e-06 *x*lens_ipow(y, 2)*dy + -7.68005e-08 *lens_ipow(x, 3)*y*lambda + 5.31597e-10 *x*lens_ipow(y, 5) + -2.15991e-09 *lens_ipow(x, 5)*dy + -0.000314854 *x*y*lens_ipow(dy, 4)*lambda + -5.09353e-10 *x*lens_ipow(y, 5)*lambda + 2.14036e-12 *lens_ipow(x, 5)*lens_ipow(y, 3) + 1.47454e-06 *lens_ipow(y, 4)*dx*lens_ipow(dy, 3) + -0.00911838 *lens_ipow(x, 2)*lens_ipow(dx, 3)*lens_ipow(dy, 3)*lens_ipow(lambda, 2)+0.0f;
const float dx31 =  + -0.0119193  + -0.00958648 *lambda + -0.00420097 *lens_ipow(dx, 2) + -0.000108381 *x*dx + 0.00700915 *lens_ipow(lambda, 2) + 1.32734e-05 *lens_ipow(x, 2) + 4.22392e-05 *lens_ipow(y, 2) + 2.31037e-08 *lens_ipow(x, 4) + -1.60316e-06 *lens_ipow(x, 2)*y*dy + -1.92001e-08 *lens_ipow(x, 4)*lambda + -3.20523e-08 *lens_ipow(y, 5)*dy + 1.32899e-09 *lens_ipow(x, 2)*lens_ipow(y, 4) + -0.000157427 *lens_ipow(x, 2)*lens_ipow(dy, 4)*lambda + -1.27338e-09 *lens_ipow(x, 2)*lens_ipow(y, 4)*lambda + 8.53492e-13 *lens_ipow(y, 8) + 1.07018e-12 *lens_ipow(x, 6)*lens_ipow(y, 2) + 5.89815e-06 *x*lens_ipow(y, 3)*dx*lens_ipow(dy, 3) + 7.44204e-08 *lens_ipow(y, 5)*lens_ipow(dx, 2)*dy + 1.77873e-10 *lens_ipow(y, 7)*dy*lambda+0.0f;
const float dx32 =  + -0.00840193 *y*dx + 0.00389116 *x*dy + -0.000108381 *x*y + 0.856409 *dx*dy + -0.938831 *dx*lens_ipow(dy, 3) + -1.23459 *lens_ipow(dx, 3)*dy + 1.47454e-06 *x*lens_ipow(y, 4)*lens_ipow(dy, 3) + 2.48068e-08 *lens_ipow(y, 6)*dx*dy + -0.00911838 *lens_ipow(x, 3)*lens_ipow(dx, 2)*lens_ipow(dy, 3)*lens_ipow(lambda, 2)+0.0f;
const float dx33 =  + -0.614842  + 0.00389116 *x*dx + 0.428204 *lens_ipow(dx, 2) + 0.967267 *lens_ipow(dy, 2) + -1.40825 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + -0.955685 *lens_ipow(dy, 4) + -0.308648 *lens_ipow(dx, 4) + -8.0158e-07 *lens_ipow(x, 2)*lens_ipow(y, 2) + -5.34204e-09 *lens_ipow(y, 6) + -3.59985e-10 *lens_ipow(x, 6) + -0.000629707 *lens_ipow(x, 2)*y*lens_ipow(dy, 3)*lambda + 4.42362e-06 *x*lens_ipow(y, 4)*dx*lens_ipow(dy, 2) + 1.24034e-08 *lens_ipow(y, 6)*lens_ipow(dx, 2) + 2.22341e-11 *lens_ipow(y, 8)*lambda + -0.00911838 *lens_ipow(x, 3)*lens_ipow(dx, 3)*lens_ipow(dy, 2)*lens_ipow(lambda, 2)+0.0f;
const float dx34 =  + -0.00958648 *y + 0.0140183 *y*lambda + -1.92001e-08 *lens_ipow(x, 4)*y + -0.000157427 *lens_ipow(x, 2)*y*lens_ipow(dy, 4) + -2.54677e-10 *lens_ipow(x, 2)*lens_ipow(y, 5) + 2.22341e-11 *lens_ipow(y, 8)*dy + -0.00607892 *lens_ipow(x, 3)*lens_ipow(dx, 3)*lens_ipow(dy, 3)*lambda+0.0f;
const float dx40 =  + -0.000532821 *dx*lambda + -0.00809514 *lens_ipow(dx, 3) + -1.77167e-07 *x*lens_ipow(y, 2) + -0.000486179 *x*lens_ipow(dx, 2) + -0.00654443 *dx*lens_ipow(dy, 2) + -0.000460228 *y*dx*dy + -0.00027138 *x*lens_ipow(dy, 2) + -1.00736e-09 *lens_ipow(x, 5) + -0.00172629 *x*lens_ipow(dx, 4) + -9.28488e-12 *lens_ipow(x, 3)*lens_ipow(y, 4) + 2.45345e-08 *lens_ipow(x, 2)*lens_ipow(y, 3)*dx*dy+0.0f;
const float dx41 =  + -0.000545894 *dy*lambda + -0.00790672 *lens_ipow(dy, 3) + -0.000270319 *y*lens_ipow(dx, 2) + -1.77167e-07 *lens_ipow(x, 2)*y + -0.00648351 *lens_ipow(dx, 2)*dy + -0.000479652 *y*lens_ipow(dy, 2) + -0.000460228 *x*dx*dy + -1.01213e-09 *lens_ipow(y, 5) + -0.00169889 *y*lens_ipow(dy, 4) + -9.28488e-12 *lens_ipow(x, 4)*lens_ipow(y, 3) + 2.45345e-08 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx*dy+0.0f;
const float dx42 =  + -0.000532821 *x*lambda + -0.827489 *lens_ipow(dx, 3) + -0.000270319 *lens_ipow(y, 2)*dx + -0.0242854 *x*lens_ipow(dx, 2) + -0.000486179 *lens_ipow(x, 2)*dx + -0.012967 *y*dx*dy + -0.00654443 *x*lens_ipow(dy, 2) + -0.000460228 *x*y*dy + -3.18192 *dx*lens_ipow(dy, 2)*lambda + -0.00345259 *lens_ipow(x, 2)*lens_ipow(dx, 3) + 2.36742 *dx*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + 8.17818e-09 *lens_ipow(x, 3)*lens_ipow(y, 3)*dy + -1.92733 *lens_ipow(dx, 5)*lens_ipow(lambda, 2)+0.0f;
const float dx43 =  + -0.000545894 *y*lambda + -0.0237202 *y*lens_ipow(dy, 2) + -0.819127 *lens_ipow(dy, 3) + -0.00648351 *y*lens_ipow(dx, 2) + -0.000479652 *lens_ipow(y, 2)*dy + -0.0130889 *x*dx*dy + -0.000460228 *x*y*dx + -0.00027138 *lens_ipow(x, 2)*dy + -3.18192 *lens_ipow(dx, 2)*dy*lambda + 2.36742 *lens_ipow(dx, 2)*dy*lens_ipow(lambda, 2) + -0.00339778 *lens_ipow(y, 2)*lens_ipow(dy, 3) + 8.17818e-09 *lens_ipow(x, 3)*lens_ipow(y, 3)*dx + -2.05025 *lens_ipow(dy, 5)*lens_ipow(lambda, 2)+0.0f;
const float dx44 =  + 0.85346  + -2.33731 *lambda + -0.000545894 *y*dy + -0.000532821 *x*dx + 1.69293 *lens_ipow(lambda, 2) + -1.59096 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + 2.36742 *lens_ipow(dx, 2)*lens_ipow(dy, 2)*lambda + -0.642442 *lens_ipow(dx, 6)*lambda + -0.683416 *lens_ipow(dy, 6)*lambda+0.0f;
