float pred_x;
float pred_y;
float pred_dx;
float pred_dy;
float sqr_err = FLT_MAX;
for(int k=0;k<5&&sqr_err > 1e-4f;k++)
{
  const float begin_x = x + dist * dx;
  const float begin_y = y + dist * dy;
  const float begin_dx = dx;
  const float begin_dy = dy;
  __attribute__((unused)) const float begin_lambda = lambda;
  pred_x =  + 24.0758 *begin_dx + 0.714404 *begin_x + 1.13639 *begin_y*begin_dx*begin_dy + 0.032411 *begin_x*begin_y*begin_dy + 0.0496792 *lens_ipow(begin_x, 2)*begin_dx + 9.19327 *lens_ipow(begin_dx, 3) + 10.149 *begin_dx*lens_ipow(begin_dy, 2) + 0.464028 *begin_x*lens_ipow(begin_dy, 2) + 1.51791 *begin_x*lens_ipow(begin_dx, 2) + 0.0192878 *lens_ipow(begin_y, 2)*begin_dx + -1.14405e-06 *lens_ipow(begin_x, 5) + -0.000677498 *lens_ipow(begin_x, 4)*lens_ipow(begin_dx, 3) + -5.64672e-08 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 4) + -2.12508e-07 *lens_ipow(begin_x, 5)*begin_y*begin_dy + -6.02066e-07 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 4)*begin_dx + -0.0098213 *lens_ipow(begin_x, 3)*lens_ipow(begin_dx, 4) + -1.90383e-08 *lens_ipow(begin_y, 7)*begin_dx*begin_dy + -6.69381e-10 *lens_ipow(begin_y, 8)*begin_dx + -7.78368e-08 *lens_ipow(begin_x, 7)*lens_ipow(begin_dx, 2) + -7.13255e-11 *begin_x*lens_ipow(begin_y, 8) + -2.5276e-10 *lens_ipow(begin_x, 7)*lens_ipow(begin_y, 2) + 1.63176e-07 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 4)*lens_ipow(begin_dy, 2) + -4.59009e-09 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 4)*begin_dx*begin_lambda + 2.41334e-08 *lens_ipow(begin_x, 7)*lens_ipow(begin_dy, 2)*begin_lambda + -2.13711e-13 *lens_ipow(begin_x, 11) + -2.81141e-11 *lens_ipow(begin_x, 8)*lens_ipow(begin_y, 2)*begin_dx + -1.07931e-11 *lens_ipow(begin_x, 10)*begin_dx + -7.39003e-12 *begin_x*lens_ipow(begin_y, 9)*begin_dy;
  pred_y =  + 0.720082 *begin_y + 24.0428 *begin_dy + -0.014603 *begin_y*begin_lambda + 0.488201 *begin_y*lens_ipow(begin_dx, 2) + 0.0532851 *lens_ipow(begin_y, 2)*begin_dy + 1.6659 *begin_y*lens_ipow(begin_dy, 2) + 1.1315 *begin_x*begin_dx*begin_dy + 0.033149 *begin_x*begin_y*begin_dx + 10.3268 *lens_ipow(begin_dx, 2)*begin_dy + 0.0189151 *lens_ipow(begin_x, 2)*begin_dy + 10.648 *lens_ipow(begin_dy, 3) + 6.86709e-07 *lens_ipow(begin_y, 5)*begin_lambda + -1.18904e-08 *lens_ipow(begin_y, 7) + -1.59389e-07 *begin_x*lens_ipow(begin_y, 5)*begin_dx + -6.6993e-08 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 3) + -7.33692e-07 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 2)*begin_dy + 2.01469e-08 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 3)*begin_lambda + -5.45356e-11 *lens_ipow(begin_x, 8)*begin_y + -1.45339e-09 *lens_ipow(begin_y, 8)*begin_dy + 1.39319e-07 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 2) + -2.51749e-10 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 7) + 1.70727e-10 *lens_ipow(begin_x, 8)*begin_y*lens_ipow(begin_dx, 2) + -2.91946e-11 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 8)*begin_dy + -7.61611e-14 *lens_ipow(begin_y, 11) + 5.90072e-11 *lens_ipow(begin_y, 9)*lens_ipow(begin_dx, 2) + -1.60411e-12 *lens_ipow(begin_x, 10)*begin_dy + 8.55147e-10 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 6)*begin_dx*begin_dy + -0.000201456 *lens_ipow(begin_x, 5)*lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 3);
  pred_dx =  + 1.07844 *begin_dx + -0.00976452 *begin_x + -0.00679202 *begin_x*begin_lambda + -0.243874 *begin_dx*begin_lambda + 0.00443152 *begin_x*begin_y*begin_dy + 0.00637913 *lens_ipow(begin_x, 2)*begin_dx + 6.34639e-05 *begin_x*lens_ipow(begin_y, 2) + 6.36474e-05 *lens_ipow(begin_x, 3) + 0.0312271 *begin_x*lens_ipow(begin_dy, 2) + 0.0963793 *begin_x*lens_ipow(begin_dx, 2) + 0.00192144 *lens_ipow(begin_y, 2)*begin_dx + 0.433169 *lens_ipow(begin_dx, 3)*begin_lambda + 0.197062 *begin_y*begin_dx*begin_dy*begin_lambda + -0.0065923 *begin_x*begin_y*lens_ipow(begin_dx, 2)*begin_dy + -0.168223 *begin_y*begin_dx*begin_dy*lens_ipow(begin_lambda, 2) + -0.000346556 *lens_ipow(begin_x, 2)*begin_y*begin_dx*begin_dy + 0.000109518 *lens_ipow(begin_x, 3)*lens_ipow(begin_dx, 2)*begin_lambda + 6.31452e-08 *lens_ipow(begin_x, 6)*begin_dx + -2.03789e-09 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 4) + 6.2172e-07 *lens_ipow(begin_x, 5)*lens_ipow(begin_dy, 2) + -3.67141 *lens_ipow(begin_dx, 7)*begin_lambda + -0.000108841 *lens_ipow(begin_x, 3)*begin_y*lens_ipow(begin_dy, 5) + -4.27484e-12 *begin_x*lens_ipow(begin_y, 8) + -1.9923e-11 *lens_ipow(begin_x, 7)*lens_ipow(begin_y, 2) + -2.43505e-10 *lens_ipow(begin_x, 8)*begin_dx + -4.27357e-10 *lens_ipow(begin_x, 6)*lens_ipow(begin_y, 2)*begin_dx*begin_lambda + -1.66259e-14 *lens_ipow(begin_x, 11) + -1.34222e-13 *lens_ipow(begin_x, 5)*lens_ipow(begin_y, 6);
  pred_dy =  + -0.00698832 *begin_y + 1.25591 *begin_dy + -0.955525 *begin_dy*begin_lambda + -0.0153323 *begin_y*begin_lambda + 0.0418371 *begin_y*lens_ipow(begin_dx, 2) + 0.00762595 *lens_ipow(begin_y, 2)*begin_dy + 0.128823 *begin_y*lens_ipow(begin_dy, 2) + 0.0743635 *begin_x*begin_dx*begin_dy + 0.00493618 *begin_x*begin_y*begin_dx + 0.346896 *lens_ipow(begin_dx, 2)*begin_dy + 6.95118e-05 *lens_ipow(begin_x, 2)*begin_y + 0.653258 *begin_dy*lens_ipow(begin_lambda, 2) + 7.30205e-05 *lens_ipow(begin_y, 3) + 0.00218526 *lens_ipow(begin_x, 2)*begin_dy + 0.452226 *lens_ipow(begin_dy, 3) + 0.00918914 *begin_y*lens_ipow(begin_lambda, 3) + -7.18563e-10 *lens_ipow(begin_x, 6)*begin_y + 1.53205e-08 *begin_x*lens_ipow(begin_y, 5)*begin_dx + 2.85692e-09 *lens_ipow(begin_y, 7)*lens_ipow(begin_dx, 2) + -4.07508e-12 *lens_ipow(begin_y, 9) + -3.29749e-11 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 5) + -1.84743e-08 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 4)*begin_dx*begin_dy + -1.29876e-11 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 7) + -9.14928e-10 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 4)*begin_dy*begin_lambda + -6.40826e-11 *lens_ipow(begin_y, 8)*begin_dy*lens_ipow(begin_lambda, 2) + -7.04503e-14 *lens_ipow(begin_x, 8)*lens_ipow(begin_y, 3) + -3.13147e-09 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 5)*lens_ipow(begin_dx, 3) + -205.259 *lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 9);
  float dx1_domega0[2][2];
  dx1_domega0[0][0] =  + 24.0758  + 1.13639 *begin_y*begin_dy + 0.0496792 *lens_ipow(begin_x, 2) + 27.5798 *lens_ipow(begin_dx, 2) + 10.149 *lens_ipow(begin_dy, 2) + 3.03582 *begin_x*begin_dx + 0.0192878 *lens_ipow(begin_y, 2) + -0.00203249 *lens_ipow(begin_x, 4)*lens_ipow(begin_dx, 2) + -6.02066e-07 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 4) + -0.0392852 *lens_ipow(begin_x, 3)*lens_ipow(begin_dx, 3) + -1.90383e-08 *lens_ipow(begin_y, 7)*begin_dy + -6.69381e-10 *lens_ipow(begin_y, 8) + -1.55674e-07 *lens_ipow(begin_x, 7)*begin_dx + -4.59009e-09 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 4)*begin_lambda + -2.81141e-11 *lens_ipow(begin_x, 8)*lens_ipow(begin_y, 2) + -1.07931e-11 *lens_ipow(begin_x, 10)+0.0f;
  dx1_domega0[0][1] =  + 1.13639 *begin_y*begin_dx + 0.032411 *begin_x*begin_y + 20.2981 *begin_dx*begin_dy + 0.928057 *begin_x*begin_dy + -2.12508e-07 *lens_ipow(begin_x, 5)*begin_y + -1.90383e-08 *lens_ipow(begin_y, 7)*begin_dx + 3.26352e-07 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 4)*begin_dy + 4.82668e-08 *lens_ipow(begin_x, 7)*begin_dy*begin_lambda + -7.39003e-12 *begin_x*lens_ipow(begin_y, 9)+0.0f;
  dx1_domega0[1][0] =  + 0.976401 *begin_y*begin_dx + 1.1315 *begin_x*begin_dy + 0.033149 *begin_x*begin_y + 20.6537 *begin_dx*begin_dy + -1.59389e-07 *begin_x*lens_ipow(begin_y, 5) + 2.78637e-07 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 3)*begin_dx + 3.41454e-10 *lens_ipow(begin_x, 8)*begin_y*begin_dx + 1.18014e-10 *lens_ipow(begin_y, 9)*begin_dx + 8.55147e-10 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 6)*begin_dy + -0.000604368 *lens_ipow(begin_x, 5)*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 3)+0.0f;
  dx1_domega0[1][1] =  + 24.0428  + 0.0532851 *lens_ipow(begin_y, 2) + 3.3318 *begin_y*begin_dy + 1.1315 *begin_x*begin_dx + 10.3268 *lens_ipow(begin_dx, 2) + 0.0189151 *lens_ipow(begin_x, 2) + 31.944 *lens_ipow(begin_dy, 2) + -7.33692e-07 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 2) + -1.45339e-09 *lens_ipow(begin_y, 8) + -2.91946e-11 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 8) + -1.60411e-12 *lens_ipow(begin_x, 10) + 8.55147e-10 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 6)*begin_dx + -0.000604368 *lens_ipow(begin_x, 5)*lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 2)+0.0f;
  float invJ[2][2];
  const float invdet = 1.0f/(dx1_domega0[0][0]*dx1_domega0[1][1] - dx1_domega0[0][1]*dx1_domega0[1][0]);
  invJ[0][0] =  dx1_domega0[1][1]*invdet;
  invJ[1][1] =  dx1_domega0[0][0]*invdet;
  invJ[0][1] = -dx1_domega0[0][1]*invdet;
  invJ[1][0] = -dx1_domega0[1][0]*invdet;
  const float dx1[2] = {out_x - pred_x, out_y - pred_y};
  for(int i=0;i<2;i++)
  {
    dx += invJ[0][i]*dx1[i];
    dy += invJ[1][i]*dx1[i];
  }
  sqr_err = dx1[0]*dx1[0] + dx1[1]*dx1[1];
}
out_dx = pred_dx;
out_dy = pred_dy;
