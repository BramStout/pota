const float dx00 =  + 0.5962  + 0.250805 *lambda + -0.00169732 *y*dy + -0.00548598 *x*dx + -0.346547 *lens_ipow(lambda, 2) + -8.28074e-06 *lens_ipow(x, 2) + -0.29773 *lens_ipow(dy, 2) + -0.945888 *lens_ipow(dx, 2) + 0.167874 *lens_ipow(lambda, 3) + -4.80601e-06 *lens_ipow(y, 2)*lambda + -0.00107164 *y*dy*lambda + -0.00302962 *x*dx*lambda + -0.0340394 *x*lens_ipow(dx, 3) + -0.00013336 *lens_ipow(y, 2)*lens_ipow(dx, 2) + -0.047415 *x*dx*lens_ipow(dy, 2)*lambda + -0.000788869 *lens_ipow(x, 2)*lens_ipow(dx, 2)*lambda + -0.000699011 *lens_ipow(x, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 2)+0.0f;
const float dx01 =  + -0.631637 *dx*dy + -0.00169732 *x*dy + -0.00234382 *y*dx + -9.61201e-06 *x*y*lambda + -0.00107164 *x*dy*lambda + -0.000266721 *x*y*lens_ipow(dx, 2) + -0.0215182 *y*lens_ipow(dx, 3)+0.0f;
const float dx02 =  + 66.2069  + 17.9457 *lambda + -0.631637 *y*dy + -0.00274299 *lens_ipow(x, 2) + -145.566 *lens_ipow(dx, 2) + -46.9272 *lens_ipow(dy, 2) + -1.89178 *x*dx + -0.00117191 *lens_ipow(y, 2) + -24.4136 *lens_ipow(lambda, 2) + 11.7019 *lens_ipow(lambda, 3) + -0.00151481 *lens_ipow(x, 2)*lambda + -0.0510591 *lens_ipow(x, 2)*lens_ipow(dx, 2) + 242.045 *lens_ipow(dx, 4) + -0.000266721 *x*lens_ipow(y, 2)*dx + -0.0322772 *lens_ipow(y, 2)*lens_ipow(dx, 2) + -0.0237075 *lens_ipow(x, 2)*lens_ipow(dy, 2)*lambda + 364.336 *lens_ipow(dx, 2)*lens_ipow(dy, 2)*lambda + -0.000525913 *lens_ipow(x, 3)*dx*lambda+0.0f;
const float dx03 =  + -0.631637 *y*dx + -0.00169732 *x*y + -93.8544 *dx*dy + -0.59546 *x*dy + -0.00107164 *x*y*lambda + -0.047415 *lens_ipow(x, 2)*dx*dy*lambda + 242.891 *lens_ipow(dx, 3)*dy*lambda + -0.000466008 *lens_ipow(x, 3)*dy*lens_ipow(lambda, 2)+0.0f;
const float dx04 =  + 0.250805 *x + 17.9457 *dx + -0.693095 *x*lambda + -48.8273 *dx*lambda + 35.1057 *dx*lens_ipow(lambda, 2) + 0.503623 *x*lens_ipow(lambda, 2) + -4.80601e-06 *x*lens_ipow(y, 2) + -0.00107164 *x*y*dy + -0.00151481 *lens_ipow(x, 2)*dx + -0.0237075 *lens_ipow(x, 2)*dx*lens_ipow(dy, 2) + 121.445 *lens_ipow(dx, 3)*lens_ipow(dy, 2) + -0.000262956 *lens_ipow(x, 3)*lens_ipow(dx, 2) + -0.000466008 *lens_ipow(x, 3)*lens_ipow(dy, 2)*lambda+0.0f;
const float dx10 =  + -0.00237215 *y*dx + -8.59409e-06 *x*y + -2.35583 *dx*dy*lambda + 2.1099 *dx*dy*lens_ipow(lambda, 2) + -0.0267842 *x*dy*lens_ipow(lambda, 2) + 0.0311121 *x*dy*lens_ipow(lambda, 3)+0.0f;
const float dx11 =  + 0.623078  + 0.0989906 *lambda + -0.303511 *lens_ipow(dx, 2) + -0.00427192 *y*dy + -0.858359 *lens_ipow(dy, 2) + -0.00237215 *x*dx + -0.067194 *lens_ipow(lambda, 2) + -4.29705e-06 *lens_ipow(x, 2) + -0.00208949 *y*dy*lambda + -4.52137e-05 *lens_ipow(y, 3)*dy*lambda + -0.00687795 *lens_ipow(y, 2)*lens_ipow(dy, 2)*lambda + -1.31303e-07 *lens_ipow(y, 4)*lambda + -8.02377 *lens_ipow(dy, 4)*lambda + -0.457421 *y*lens_ipow(dy, 3)*lambda + -4.33424 *lens_ipow(dy, 4)*lens_ipow(lambda, 2)+0.0f;
const float dx12 =  + -0.607023 *y*dx + -0.00237215 *x*y + -403.324 *dx*dy*lambda + -2.35583 *x*dy*lambda + 2.1099 *x*dy*lens_ipow(lambda, 2) + 519.221 *dx*dy*lens_ipow(lambda, 2) + 83.965 *dx*lens_ipow(dy, 3)*lambda + -189.318 *dx*dy*lens_ipow(lambda, 3)+0.0f;
const float dx13 =  + 67.8437  + 8.18959 *lambda + -0.00213596 *lens_ipow(y, 2) + -1.71672 *y*dy + -5.64735 *lens_ipow(lambda, 2) + -136.53 *lens_ipow(dy, 2) + -201.662 *lens_ipow(dx, 2)*lambda + -0.00104475 *lens_ipow(y, 2)*lambda + -2.35583 *x*dx*lambda + 2.1099 *x*dx*lens_ipow(lambda, 2) + -0.0133921 *lens_ipow(x, 2)*lens_ipow(lambda, 2) + 259.61 *lens_ipow(dx, 2)*lens_ipow(lambda, 2) + -1.13034e-05 *lens_ipow(y, 4)*lambda + 125.947 *lens_ipow(dx, 2)*lens_ipow(dy, 2)*lambda + -94.6589 *lens_ipow(dx, 2)*lens_ipow(lambda, 3) + -0.0045853 *lens_ipow(y, 3)*dy*lambda + 0.015556 *lens_ipow(x, 2)*lens_ipow(lambda, 3) + -32.0951 *y*lens_ipow(dy, 3)*lambda + -0.686131 *lens_ipow(y, 2)*lens_ipow(dy, 2)*lambda + -17.3369 *y*lens_ipow(dy, 3)*lens_ipow(lambda, 2) + -1323.39 *lens_ipow(dy, 4)*lens_ipow(lambda, 2)+0.0f;
const float dx14 =  + 8.18959 *dy + 0.0989906 *y + -0.134388 *y*lambda + -11.2947 *dy*lambda + -201.662 *lens_ipow(dx, 2)*dy + -0.00104475 *lens_ipow(y, 2)*dy + -2.35583 *x*dx*dy + 4.21979 *x*dx*dy*lambda + -0.0267842 *lens_ipow(x, 2)*dy*lambda + 519.221 *lens_ipow(dx, 2)*dy*lambda + -1.13034e-05 *lens_ipow(y, 4)*dy + 41.9825 *lens_ipow(dx, 2)*lens_ipow(dy, 3) + -283.977 *lens_ipow(dx, 2)*dy*lens_ipow(lambda, 2) + -0.00229265 *lens_ipow(y, 3)*lens_ipow(dy, 2) + -2.62607e-08 *lens_ipow(y, 5) + 0.0466681 *lens_ipow(x, 2)*dy*lens_ipow(lambda, 2) + -8.02377 *y*lens_ipow(dy, 4) + -0.22871 *lens_ipow(y, 2)*lens_ipow(dy, 3) + -8.66847 *y*lens_ipow(dy, 4)*lambda + -529.355 *lens_ipow(dy, 5)*lambda+0.0f;
const float dx20 =  + -0.007991  + 0.000645942 *x*dx + -0.00144593 *lens_ipow(lambda, 2) + 0.142763 *lens_ipow(dx, 2)*lambda + 0.0458962 *lens_ipow(dy, 2)*lambda + 0.00174266 *lens_ipow(lambda, 3) + 6.53855e-07 *lens_ipow(y, 2)*lambda + 7.56991e-06 *lens_ipow(x, 2)*lambda + 0.000798757 *y*dy*lambda + 0.205025 *lens_ipow(dx, 4) + -1.17777e-05 *lens_ipow(x, 2)*lens_ipow(lambda, 2) + -0.155157 *lens_ipow(dx, 2)*lens_ipow(lambda, 2) + -0.0439539 *lens_ipow(dy, 2)*lens_ipow(lambda, 2) + -0.000792449 *y*dy*lens_ipow(lambda, 2) + 0.0160391 *x*lens_ipow(dx, 3)*lambda + 0.286882 *lens_ipow(dx, 4)*lambda + -0.00107724 *x*dx*lens_ipow(lambda, 4) + 0.000179836 *lens_ipow(x, 2)*lens_ipow(dx, 2)*lens_ipow(lambda, 2) + -2.67236e-06 *lens_ipow(y, 2)*lens_ipow(lambda, 6)+0.0f;
const float dx21 =  + 0.023804 *dx*dy + 0.000210499 *y*dx + 1.30771e-06 *x*y*lambda + 0.000798757 *x*dy*lambda + -0.000792449 *x*dy*lens_ipow(lambda, 2) + -5.34472e-06 *x*y*lens_ipow(lambda, 6)+0.0f;
const float dx22 =  + 0.750736  + -0.325733 *lambda + 0.023804 *y*dy + 0.000322971 *lens_ipow(x, 2) + 1.78703 *lens_ipow(dy, 2) + 0.000105249 *lens_ipow(y, 2) + 0.245136 *lens_ipow(lambda, 2) + 0.285526 *x*dx*lambda + 19.0642 *lens_ipow(dx, 2)*lambda + 0.820101 *x*lens_ipow(dx, 3) + -18.9173 *lens_ipow(dx, 2)*lens_ipow(lambda, 2) + 51.9678 *lens_ipow(dx, 4) + -0.310314 *x*dx*lens_ipow(lambda, 2) + 0.0240586 *lens_ipow(x, 2)*lens_ipow(dx, 2)*lambda + 1.14753 *x*lens_ipow(dx, 3)*lambda + -0.000538618 *lens_ipow(x, 2)*lens_ipow(lambda, 4) + 0.000119891 *lens_ipow(x, 3)*dx*lens_ipow(lambda, 2)+0.0f;
const float dx23 =  + 0.023804 *y*dx + 3.57407 *dx*dy + 0.0917924 *x*dy*lambda + 0.000798757 *x*y*lambda + -0.0879078 *x*dy*lens_ipow(lambda, 2) + -0.000792449 *x*y*lens_ipow(lambda, 2)+0.0f;
const float dx24 =  + -0.325733 *dx + -0.00289187 *x*lambda + 0.490272 *dx*lambda + 0.142763 *x*lens_ipow(dx, 2) + 6.35475 *lens_ipow(dx, 3) + 0.0458962 *x*lens_ipow(dy, 2) + 0.00522797 *x*lens_ipow(lambda, 2) + 6.53855e-07 *x*lens_ipow(y, 2) + 2.5233e-06 *lens_ipow(x, 3) + 0.000798757 *x*y*dy + -12.6115 *lens_ipow(dx, 3)*lambda + -7.85177e-06 *lens_ipow(x, 3)*lambda + -0.310314 *x*lens_ipow(dx, 2)*lambda + -0.0879078 *x*lens_ipow(dy, 2)*lambda + -0.0015849 *x*y*dy*lambda + 0.00801955 *lens_ipow(x, 2)*lens_ipow(dx, 3) + 0.286882 *x*lens_ipow(dx, 4) + -0.00215447 *lens_ipow(x, 2)*dx*lens_ipow(lambda, 3) + 0.000119891 *lens_ipow(x, 3)*lens_ipow(dx, 2)*lambda + -1.60342e-05 *x*lens_ipow(y, 2)*lens_ipow(lambda, 5)+0.0f;
const float dx30 =  + 0.0230275 *dx*dy + 0.000199112 *y*dx + 4.88636e-07 *x*y + 0.000196004 *x*dy + -2.19196e-05 *y*dx*lens_ipow(lambda, 2) + -0.00717465 *y*dx*lens_ipow(dy, 4) + 0.00890519 *x*lens_ipow(dy, 5)+0.0f;
const float dx31 =  + -0.00812867  + 0.0117314 *lens_ipow(dx, 2) + 0.00091277 *y*dy + 0.043139 *lens_ipow(dy, 2) + 0.000199112 *x*dx + 2.44318e-07 *lens_ipow(x, 2) + 3.32342e-06 *lens_ipow(y, 2) + -0.030375 *lens_ipow(dy, 2)*lambda + -0.000817864 *y*dy*lambda + -5.12907e-06 *lens_ipow(y, 2)*lambda + 6.46072e-07 *lens_ipow(y, 3)*dy + 0.0176545 *y*lens_ipow(dy, 3) + -2.19196e-05 *x*dx*lens_ipow(lambda, 2) + 0.000510191 *y*lens_ipow(dx, 2)*dy + 0.596808 *lens_ipow(dy, 4) + 0.000175822 *lens_ipow(y, 2)*lens_ipow(dy, 2) + -0.00717465 *x*dx*lens_ipow(dy, 4)+0.0f;
const float dx32 =  + 0.0234629 *y*dx + 0.0230275 *x*dy + 0.000199112 *x*y + 3.49526 *dx*dy + -2.19196e-05 *x*y*lens_ipow(lambda, 2) + 0.000510191 *lens_ipow(y, 2)*dx*dy + -0.00717465 *x*y*lens_ipow(dy, 4)+0.0f;
const float dx33 =  + 0.782426  + -0.552262 *lambda + 0.000456385 *lens_ipow(y, 2) + 0.086278 *y*dy + 0.0230275 *x*dx + 1.74763 *lens_ipow(dx, 2) + 0.758713 *lens_ipow(lambda, 2) + 9.80018e-05 *lens_ipow(x, 2) + 5.48547 *lens_ipow(dy, 2) + -0.0607501 *y*dy*lambda + -2.4629 *lens_ipow(dy, 2)*lambda + -0.000408932 *lens_ipow(y, 2)*lambda + -0.363228 *lens_ipow(lambda, 3) + 1.61518e-07 *lens_ipow(y, 4) + 76.8945 *lens_ipow(dy, 4) + 0.0264817 *lens_ipow(y, 2)*lens_ipow(dy, 2) + 0.000255095 *lens_ipow(y, 2)*lens_ipow(dx, 2) + 2.38723 *y*lens_ipow(dy, 3) + 0.000117214 *lens_ipow(y, 3)*dy + -0.0286986 *x*y*dx*lens_ipow(dy, 3) + 0.022263 *lens_ipow(x, 2)*lens_ipow(dy, 4)+0.0f;
const float dx34 =  + -0.552262 *dy + 1.51743 *dy*lambda + -0.030375 *y*lens_ipow(dy, 2) + -0.820966 *lens_ipow(dy, 3) + -0.000408932 *lens_ipow(y, 2)*dy + -1.08968 *dy*lens_ipow(lambda, 2) + -1.70969e-06 *lens_ipow(y, 3) + -4.38391e-05 *x*y*dx*lambda+0.0f;
const float dx40 =  + -0.168621 *lens_ipow(dx, 3) + -0.00391527 *x*lens_ipow(dx, 2) + -3.00257e-05 *lens_ipow(x, 2)*dx + -8.38076e-08 *lens_ipow(x, 3) + -0.00248538 *lens_ipow(y, 2)*dx*lens_ipow(dy, 2) + -2.57939e-08 *lens_ipow(y, 4)*dx + -0.235155 *y*dx*lens_ipow(dy, 3) + -8.24418 *dx*lens_ipow(dy, 4) + -1.2083e-05 *lens_ipow(y, 3)*dx*dy + -1.7059e-05 *x*lens_ipow(y, 3)*lens_ipow(dy, 3) + -0.00216258 *x*lens_ipow(y, 2)*lens_ipow(dy, 4) + -0.128851 *x*y*lens_ipow(dy, 5) + -3.02848 *x*lens_ipow(dy, 6) + -5.3632e-08 *x*lens_ipow(y, 4)*lens_ipow(dy, 2)+0.0f;
const float dx41 =  + -0.00141371 *dy + -1.00654e-05 *y + -0.00497077 *x*y*dx*lens_ipow(dy, 2) + -1.03175e-07 *x*lens_ipow(y, 3)*dx + -0.387803 *y*lens_ipow(dx, 2)*lens_ipow(dy, 2) + -0.0030978 *lens_ipow(y, 2)*lens_ipow(dx, 2)*dy + -8.90255e-06 *lens_ipow(y, 3)*lens_ipow(dx, 2) + -0.235155 *x*dx*lens_ipow(dy, 3) + -16.7845 *lens_ipow(dx, 2)*lens_ipow(dy, 3) + -3.62489e-05 *x*lens_ipow(y, 2)*dx*dy + -2.55884e-05 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dy, 3) + -0.00216258 *lens_ipow(x, 2)*y*lens_ipow(dy, 4) + -0.0644253 *lens_ipow(x, 2)*lens_ipow(dy, 5) + -1.07264e-07 *lens_ipow(x, 2)*lens_ipow(y, 3)*lens_ipow(dy, 2)+0.0f;
const float dx42 =  + -21.6936 *lens_ipow(dx, 3) + -0.505862 *x*lens_ipow(dx, 2) + -0.00391527 *lens_ipow(x, 2)*dx + -1.00086e-05 *lens_ipow(x, 3) + -0.00248538 *x*lens_ipow(y, 2)*lens_ipow(dy, 2) + -2.57939e-08 *x*lens_ipow(y, 4) + -1109.15 *dx*lens_ipow(dy, 4) + -0.387803 *lens_ipow(y, 2)*dx*lens_ipow(dy, 2) + -0.0020652 *lens_ipow(y, 3)*dx*dy + -4.45127e-06 *lens_ipow(y, 4)*dx + -0.235155 *x*y*lens_ipow(dy, 3) + -33.569 *y*dx*lens_ipow(dy, 3) + -8.24418 *x*lens_ipow(dy, 4) + -1.2083e-05 *x*lens_ipow(y, 3)*dy+0.0f;
const float dx43 =  + -0.00141371 *y + -0.187815 *dy + -0.00497077 *x*lens_ipow(y, 2)*dx*dy + -2218.29 *lens_ipow(dx, 2)*lens_ipow(dy, 3) + -0.387803 *lens_ipow(y, 2)*lens_ipow(dx, 2)*dy + -0.0010326 *lens_ipow(y, 3)*lens_ipow(dx, 2) + -0.705466 *x*y*dx*lens_ipow(dy, 2) + -50.3535 *y*lens_ipow(dx, 2)*lens_ipow(dy, 2) + -32.9767 *x*dx*lens_ipow(dy, 3) + -1.2083e-05 *x*lens_ipow(y, 3)*dx + -2.55884e-05 *lens_ipow(x, 2)*lens_ipow(y, 3)*lens_ipow(dy, 2) + -0.00432517 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dy, 3) + -0.322127 *lens_ipow(x, 2)*y*lens_ipow(dy, 4) + -9.08545 *lens_ipow(x, 2)*lens_ipow(dy, 5) + -5.3632e-08 *lens_ipow(x, 2)*lens_ipow(y, 4)*dy+0.0f;
const float dx44 =  + 1.51523  + -6.35087 *lambda + 9.3943 *lens_ipow(lambda, 2) + -4.7886 *lens_ipow(lambda, 3)+0.0f;
