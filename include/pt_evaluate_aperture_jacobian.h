const float dx00 =  + 1.09538 *lambda + 0.0037951 *x*dx + -1.63151 *lens_ipow(lambda, 2) + -0.000478074 *lens_ipow(y, 2) + -0.00123827 *lens_ipow(x, 2) + -0.184661 *lens_ipow(dy, 2) + -0.356237 *lens_ipow(dx, 2)*lambda + 0.838616 *lens_ipow(lambda, 3) + 0.310712 *lens_ipow(dy, 4) + -0.0544476 *x*dx*lens_ipow(dy, 2) + -0.00121691 *lens_ipow(x, 2)*lens_ipow(dx, 2) + -0.0033458 *x*y*dx*dy*lambda + 4.14469e-06 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(lambda, 2) + -2.79838e-08 *lens_ipow(x, 4)*lens_ipow(y, 2) + -1.4581e-08 *lens_ipow(x, 6) + 1.05726e-08 *lens_ipow(x, 6)*lambda + 1.62764 *lens_ipow(dx, 4)*lens_ipow(lambda, 3) + -7.3163e-11 *lens_ipow(x, 2)*lens_ipow(y, 6) + 3.91242e-09 *lens_ipow(y, 7)*lens_ipow(dx, 2)*dy+0.0f;
const float dx01 =  + -0.0547589 *dx*dy + -0.000956149 *x*y + 1.98005e-05 *lens_ipow(y, 3)*dx + -0.0016729 *lens_ipow(x, 2)*dx*dy*lambda + 2.76313e-06 *lens_ipow(x, 3)*y*lens_ipow(lambda, 2) + -1.11935e-08 *lens_ipow(x, 5)*y + -1.46326e-10 *lens_ipow(x, 3)*lens_ipow(y, 5) + -0.000666126 *lens_ipow(y, 3)*lens_ipow(dx, 5) + 2.7387e-08 *x*lens_ipow(y, 6)*lens_ipow(dx, 2)*dy+0.0f;
const float dx02 =  + 26.7119  + 6.60947 *lambda + -0.0547589 *y*dy + 0.00189755 *lens_ipow(x, 2) + -49.6076 *lens_ipow(dx, 2) + -14.2808 *lens_ipow(dy, 2) + -4.54335 *lens_ipow(lambda, 2) + -0.712474 *x*dx*lambda + 4.95014e-06 *lens_ipow(y, 4) + 37.7644 *lens_ipow(dx, 4) + -0.0272238 *lens_ipow(x, 2)*lens_ipow(dy, 2) + -0.000811273 *lens_ipow(x, 3)*dx + -0.0016729 *lens_ipow(x, 2)*y*dy*lambda + 6.51054 *x*lens_ipow(dx, 3)*lens_ipow(lambda, 3) + -0.000832657 *lens_ipow(y, 4)*lens_ipow(dx, 4) + 7.82484e-09 *x*lens_ipow(y, 7)*dx*dy+0.0f;
const float dx03 =  + -0.0547589 *y*dx + -28.5616 *dx*dy + -0.369321 *x*dy + 1.24285 *x*lens_ipow(dy, 3) + -0.0544476 *lens_ipow(x, 2)*dx*dy + -0.0016729 *lens_ipow(x, 2)*y*dx*lambda + 3.91242e-09 *x*lens_ipow(y, 7)*lens_ipow(dx, 2)+0.0f;
const float dx04 =  + 1.09538 *x + 6.60947 *dx + -3.26303 *x*lambda + -9.0867 *dx*lambda + -0.356237 *x*lens_ipow(dx, 2) + 2.51585 *x*lens_ipow(lambda, 2) + -0.0016729 *lens_ipow(x, 2)*y*dx*dy + 2.76313e-06 *lens_ipow(x, 3)*lens_ipow(y, 2)*lambda + 1.51037e-09 *lens_ipow(x, 7) + 4.88291 *x*lens_ipow(dx, 4)*lens_ipow(lambda, 2)+0.0f;
const float dx10 =  + -0.0529828 *dx*dy + -0.00103825 *x*y + 0.00272144 *x*dy + 0.000399599 *x*y*lambda + -0.000822313 *lens_ipow(y, 2)*dx*dy + -1.36745e-06 *lens_ipow(x, 3)*y + -0.0139913 *x*lens_ipow(dy, 3) + 0.000343744 *lens_ipow(x, 2)*y*dx*lens_ipow(dy, 2) + -9.89644e-09 *x*lens_ipow(y, 5) + -9.29391e-11 *lens_ipow(x, 5)*lens_ipow(y, 3)+0.0f;
const float dx11 =  + 1.14323 *lambda + -0.180053 *lens_ipow(dx, 2) + -0.142826 *lens_ipow(dy, 2) + -1.77677 *lens_ipow(lambda, 2) + -0.000519123 *lens_ipow(x, 2) + -0.00150956 *lens_ipow(y, 2) + 0.931493 *lens_ipow(lambda, 3) + 0.000572195 *lens_ipow(y, 2)*lambda + 0.0001998 *lens_ipow(x, 2)*lambda + -0.00164463 *x*y*dx*dy + 0.318617 *lens_ipow(dx, 4) + -3.41864e-07 *lens_ipow(x, 4) + -0.002853 *lens_ipow(y, 2)*lens_ipow(dy, 2) + 0.000114581 *lens_ipow(x, 3)*dx*lens_ipow(dy, 2) + -9.61591e-09 *lens_ipow(y, 6) + -2.47411e-08 *lens_ipow(x, 2)*lens_ipow(y, 4) + -4.64696e-11 *lens_ipow(x, 6)*lens_ipow(y, 2) + -0.00672124 *lens_ipow(y, 3)*lens_ipow(dx, 2)*lens_ipow(dy, 3)+0.0f;
const float dx12 =  + -0.360107 *y*dx + -0.0529828 *x*dy + -31.6538 *dx*dy + -0.000822313 *x*lens_ipow(y, 2)*dy + 1.27447 *y*lens_ipow(dx, 3) + 0.000114581 *lens_ipow(x, 3)*y*lens_ipow(dy, 2) + 354.147 *lens_ipow(dx, 3)*lens_ipow(dy, 3) + -0.00336062 *lens_ipow(y, 4)*dx*lens_ipow(dy, 3)+0.0f;
const float dx13 =  + 26.6478  + 7.07798 *lambda + -0.285652 *y*dy + -0.0529828 *x*dx + -15.8269 *lens_ipow(dx, 2) + -4.90498 *lens_ipow(lambda, 2) + 0.00136072 *lens_ipow(x, 2) + -50.532 *lens_ipow(dy, 2) + -0.000822313 *x*lens_ipow(y, 2)*dx + 34.6859 *lens_ipow(dy, 4) + -0.020987 *lens_ipow(x, 2)*lens_ipow(dy, 2) + -0.001902 *lens_ipow(y, 3)*dy + 0.000229162 *lens_ipow(x, 3)*y*dx*dy + 265.61 *lens_ipow(dx, 4)*lens_ipow(dy, 2) + -0.00504093 *lens_ipow(y, 4)*lens_ipow(dx, 2)*lens_ipow(dy, 2)+0.0f;
const float dx14 =  + 7.07798 *dy + 1.14323 *y + -3.55354 *y*lambda + -9.80996 *dy*lambda + 2.79448 *y*lens_ipow(lambda, 2) + 0.000190732 *lens_ipow(y, 3) + 0.0001998 *lens_ipow(x, 2)*y+0.0f;
const float dx20 =  + -0.0374335  + 0.0213387 *lambda + 0.00011936 *y*dy + -0.0165778 *lens_ipow(lambda, 2) + -2.52176e-05 *lens_ipow(y, 2) + -8.29654e-05 *lens_ipow(x, 2) + -0.0329376 *lens_ipow(dx, 2) + -0.0367118 *lens_ipow(dy, 2)*lambda + 8.33992e-06 *lens_ipow(x, 3)*dx + -4.32665e-08 *lens_ipow(y, 4) + 4.77874e-06 *x*lens_ipow(y, 2)*dx + 4.59186e-06 *lens_ipow(x, 2)*y*dy + 1.87765e-06 *lens_ipow(y, 3)*dy + 0.0326943 *lens_ipow(dy, 2)*lens_ipow(lambda, 2) + 5.17241e-08 *lens_ipow(y, 4)*lambda + 2.64071e-07 *lens_ipow(x, 2)*lens_ipow(y, 2)*lambda + -2.56684e-09 *lens_ipow(x, 4)*lens_ipow(y, 2) + -4.81902e-07 *lens_ipow(x, 4)*lens_ipow(dy, 2) + 2.18393e-07 *lens_ipow(x, 4)*lens_ipow(lambda, 2) + -2.55995e-12 *lens_ipow(x, 8) + -3.9991e-12 *lens_ipow(x, 2)*lens_ipow(y, 6) + -9.44946e-09 *lens_ipow(x, 2)*lens_ipow(y, 4)*lens_ipow(dx, 2) + 1.76415e-07 *lens_ipow(x, 5)*lens_ipow(dx, 3)+0.0f;
const float dx21 =  + -0.0222137 *dx*dy + 0.00011936 *x*dy + -5.04351e-05 *x*y + -1.73066e-07 *x*lens_ipow(y, 3) + 4.77874e-06 *lens_ipow(x, 2)*y*dx + 1.53062e-06 *lens_ipow(x, 3)*dy + 5.63296e-06 *x*lens_ipow(y, 2)*dy + 2.06896e-07 *x*lens_ipow(y, 3)*lambda + 1.76047e-07 *lens_ipow(x, 3)*y*lambda + -1.02674e-09 *lens_ipow(x, 5)*y + 3.68823e-11 *lens_ipow(y, 7)*dx + -7.99819e-12 *lens_ipow(x, 3)*lens_ipow(y, 5) + -1.25993e-08 *lens_ipow(x, 3)*lens_ipow(y, 3)*lens_ipow(dx, 2)+0.0f;
const float dx22 =  + 0.399786  + -0.0222137 *y*dy + -1.47599 *lens_ipow(dx, 2) + -0.483482 *lens_ipow(dy, 2) + -0.0658752 *x*dx + 2.08498e-06 *lens_ipow(x, 4) + 2.38937e-06 *lens_ipow(x, 2)*lens_ipow(y, 2) + 4.61028e-12 *lens_ipow(y, 8) + -6.29964e-09 *lens_ipow(x, 3)*lens_ipow(y, 4)*dx + 8.82077e-08 *lens_ipow(x, 6)*lens_ipow(dx, 2)+0.0f;
const float dx23 =  + -0.0222137 *y*dx + 0.00011936 *x*y + -0.966964 *dx*dy + -0.0734237 *x*dy*lambda + 1.53062e-06 *lens_ipow(x, 3)*y + 1.87765e-06 *x*lens_ipow(y, 3) + 0.0653886 *x*dy*lens_ipow(lambda, 2) + -1.92761e-07 *lens_ipow(x, 5)*dy+0.0f;
const float dx24 =  + 0.0213387 *x + -0.0331556 *x*lambda + -0.0367118 *x*lens_ipow(dy, 2) + 0.0653886 *x*lens_ipow(dy, 2)*lambda + 5.17241e-08 *x*lens_ipow(y, 4) + 8.80235e-08 *lens_ipow(x, 3)*lens_ipow(y, 2) + 8.73574e-08 *lens_ipow(x, 5)*lambda+0.0f;
const float dx30 =  + -0.0217624 *dx*dy + 0.000303076 *y*dx + -6.95813e-05 *x*y + 3.91592e-05 *x*y*lambda + -8.97941e-05 *x*y*lens_ipow(dy, 2) + 1.67067e-05 *lens_ipow(x, 3)*lens_ipow(dx, 2)*dy + -7.18483e-10 *lens_ipow(x, 5)*y + 2.96507e-09 *lens_ipow(y, 5)*dx + -7.26874e-10 *x*lens_ipow(y, 5) + 5.95531e-10 *lens_ipow(x, 3)*lens_ipow(y, 4)*dy + 5.45668e-10 *lens_ipow(x, 4)*lens_ipow(y, 3)*dx + 2.99664e-11 *lens_ipow(x, 7)*dy+0.0f;
const float dx31 =  + -0.0358994  + 0.0169134 *lambda + -0.0119194 *lens_ipow(dx, 2) + 0.000548983 *y*dy + -0.030044 *lens_ipow(dy, 2) + 0.000303076 *x*dx + -0.0139602 *lens_ipow(lambda, 2) + -3.47907e-05 *lens_ipow(x, 2) + -0.000104456 *lens_ipow(y, 2) + 5.5509e-05 *lens_ipow(y, 2)*lambda + 1.95796e-05 *lens_ipow(x, 2)*lambda + 0.0103834 *lens_ipow(dx, 4) + -4.48971e-05 *lens_ipow(x, 2)*lens_ipow(dy, 2) + 1.62687e-08 *lens_ipow(y, 5)*dy + -4.71559e-07 *lens_ipow(y, 4)*lens_ipow(dx, 2) + -1.29143e-06 *lens_ipow(y, 4)*lens_ipow(dy, 2) + -1.19747e-10 *lens_ipow(x, 6) + 1.48253e-08 *x*lens_ipow(y, 4)*dx + -1.81719e-09 *lens_ipow(x, 2)*lens_ipow(y, 4) + -2.16208e-12 *lens_ipow(y, 8) + 5.95531e-10 *lens_ipow(x, 4)*lens_ipow(y, 3)*dy + 3.27401e-10 *lens_ipow(x, 5)*lens_ipow(y, 2)*dx+0.0f;
const float dx32 =  + -0.0238389 *y*dx + -0.0217624 *x*dy + 0.000303076 *x*y + -0.982911 *dx*dy + 0.0415338 *y*lens_ipow(dx, 3) + -1.88623e-07 *lens_ipow(y, 5)*dx + 8.35337e-06 *lens_ipow(x, 4)*dx*dy + 2.96507e-09 *x*lens_ipow(y, 5) + 1.09134e-10 *lens_ipow(x, 5)*lens_ipow(y, 3)+0.0f;
const float dx33 =  + 0.396945  + 0.000274491 *lens_ipow(y, 2) + -0.0600881 *y*dy + -0.0217624 *x*dx + -0.491456 *lens_ipow(dx, 2) + -1.4463 *lens_ipow(dy, 2) + -8.97941e-05 *lens_ipow(x, 2)*y*dy + 2.71146e-09 *lens_ipow(y, 6) + 4.17668e-06 *lens_ipow(x, 4)*lens_ipow(dx, 2) + -5.16571e-07 *lens_ipow(y, 5)*dy + 1.48883e-10 *lens_ipow(x, 4)*lens_ipow(y, 4) + 3.74579e-12 *lens_ipow(x, 8)+0.0f;
const float dx34 =  + 0.0169134 *y + -0.0279204 *y*lambda + 1.8503e-05 *lens_ipow(y, 3) + 1.95796e-05 *lens_ipow(x, 2)*y+0.0f;
const float dx40 =  + -5.22156e-07 *x*lens_ipow(y, 2) + -1.39382e-07 *lens_ipow(x, 3) + -0.000122306 *y*dx*dy + 5.95614e-07 *x*lens_ipow(y, 2)*lambda + -2.22729e-06 *x*lens_ipow(y, 2)*lens_ipow(dy, 2) + 0.0187616 *lens_ipow(dx, 5) + -1.80957e-06 *lens_ipow(x, 3)*lens_ipow(dx, 2) + 0.0182839 *dx*lens_ipow(dy, 4) + -1.47293e-05 *x*lens_ipow(y, 2)*lens_ipow(dx, 4) + -7.99661e-06 *lens_ipow(x, 3)*lens_ipow(dy, 4) + 0.00108348 *lens_ipow(x, 2)*lens_ipow(dx, 3)*lens_ipow(dy, 2) + -2.7855e-12 *lens_ipow(x, 7) + -2.19118e-11 *lens_ipow(x, 3)*lens_ipow(y, 4)*lambda+0.0f;
const float dx41 =  + -5.22156e-07 *lens_ipow(x, 2)*y + -1.43944e-07 *lens_ipow(y, 3) + -0.000122306 *x*dx*dy + 5.95614e-07 *lens_ipow(x, 2)*y*lambda + -2.22729e-06 *lens_ipow(x, 2)*y*lens_ipow(dy, 2) + -1.03494e-06 *lens_ipow(y, 3)*lens_ipow(dx, 2) + 0.0496336 *lens_ipow(dx, 2)*lens_ipow(dy, 3) + -1.47293e-05 *lens_ipow(x, 2)*y*lens_ipow(dx, 4) + 0.000457596 *lens_ipow(y, 2)*lens_ipow(dx, 4)*dy + -2.2331e-05 *lens_ipow(y, 3)*lens_ipow(dy, 4) + -2.86566e-12 *lens_ipow(y, 7) + -2.19118e-11 *lens_ipow(x, 4)*lens_ipow(y, 3)*lambda + 0.109274 *lens_ipow(dy, 7)*lambda+0.0f;
const float dx42 =  + -0.827278 *lens_ipow(dx, 3) + -0.846951 *dx*lens_ipow(dy, 2) + -0.000122306 *x*y*dy + 0.0938079 *x*lens_ipow(dx, 4) + -9.04783e-07 *lens_ipow(x, 4)*dx + -5.17472e-07 *lens_ipow(y, 4)*dx + 0.0992673 *y*dx*lens_ipow(dy, 3) + 0.0182839 *x*lens_ipow(dy, 4) + -2.94586e-05 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dx, 3) + 0.000610128 *lens_ipow(y, 3)*lens_ipow(dx, 3)*dy + 0.00108348 *lens_ipow(x, 3)*lens_ipow(dx, 2)*lens_ipow(dy, 2) + -52.0423 *lens_ipow(dx, 5)*lens_ipow(dy, 2)*lens_ipow(lambda, 3)+0.0f;
const float dx43 =  + -0.846951 *lens_ipow(dx, 2)*dy + -0.846647 *lens_ipow(dy, 3) + -0.000122306 *x*y*dx + -2.22729e-06 *lens_ipow(x, 2)*lens_ipow(y, 2)*dy + 0.148901 *y*lens_ipow(dx, 2)*lens_ipow(dy, 2) + 0.0731355 *x*dx*lens_ipow(dy, 3) + 0.000152532 *lens_ipow(y, 3)*lens_ipow(dx, 4) + -7.99661e-06 *lens_ipow(x, 4)*lens_ipow(dy, 3) + -2.2331e-05 *lens_ipow(y, 4)*lens_ipow(dy, 3) + 0.000722318 *lens_ipow(x, 3)*lens_ipow(dx, 3)*dy + 0.764915 *y*lens_ipow(dy, 6)*lambda + -17.3474 *lens_ipow(dx, 6)*dy*lens_ipow(lambda, 3)+0.0f;
const float dx44 =  + 0.595453  + -1.6424 *lambda + 1.19568 *lens_ipow(lambda, 2) + 2.97807e-07 *lens_ipow(x, 2)*lens_ipow(y, 2) + -5.47795e-12 *lens_ipow(x, 4)*lens_ipow(y, 4) + 0.109274 *y*lens_ipow(dy, 7) + -26.0211 *lens_ipow(dx, 6)*lens_ipow(dy, 2)*lens_ipow(lambda, 2)+0.0f;
