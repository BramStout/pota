float pred_x;
float pred_y;
float pred_dx;
float pred_dy;
float sqr_err = FLT_MAX;
for(int k=0;k<5&&sqr_err > 1e-4f;k++)
{
  const float begin_x = x + dist * dx;
  const float begin_y = y + dist * dy;
  const float begin_dx = dx;
  const float begin_dy = dy;
  __attribute__((unused)) const float begin_lambda = lambda;
  pred_x =  + 86.4597 *begin_dx + 0.719396 *begin_x + 0.0979591 *begin_x*begin_lambda + 8.40417 *begin_dx*begin_lambda + 1.78167 *begin_y*begin_dx*begin_dy + 0.0257671 *begin_x*begin_y*begin_dy + 0.0365674 *lens_ipow(begin_x, 2)*begin_dx + 62.77 *lens_ipow(begin_dx, 3) + -0.0678272 *begin_x*lens_ipow(begin_lambda, 2) + 61.8597 *begin_dx*lens_ipow(begin_dy, 2) + 0.000121639 *lens_ipow(begin_x, 3) + 1.17733 *begin_x*lens_ipow(begin_dy, 2) + 2.99936 *begin_x*lens_ipow(begin_dx, 2) + -5.77614 *begin_dx*lens_ipow(begin_lambda, 2) + 0.000597495 *begin_x*lens_ipow(begin_y, 2)*begin_lambda + 0.0513483 *lens_ipow(begin_y, 2)*begin_dx*begin_lambda + -2.93686e-08 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 2) + -1.06328 *begin_y*lens_ipow(begin_dx, 3)*begin_dy + -0.000817827 *begin_x*lens_ipow(begin_y, 2)*lens_ipow(begin_lambda, 2) + 0.000144399 *lens_ipow(begin_x, 3)*lens_ipow(begin_dy, 2) + -3.17616e-06 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*begin_dx + -0.0703785 *lens_ipow(begin_y, 2)*begin_dx*lens_ipow(begin_lambda, 2) + -4.22067 *begin_x*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2)*begin_lambda + -291.864 *lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 2)*begin_lambda + 0.000444537 *begin_x*lens_ipow(begin_y, 2)*lens_ipow(begin_lambda, 4) + 0.0381449 *lens_ipow(begin_y, 2)*begin_dx*lens_ipow(begin_lambda, 4) + -138191 *lens_ipow(begin_dx, 11) + -2398.77 *begin_x*lens_ipow(begin_dx, 10);
  pred_y =  + 0.720977 *begin_y + 86.5823 *begin_dy + 8.22068 *begin_dy*begin_lambda + 0.0941827 *begin_y*begin_lambda + 1.19424 *begin_y*lens_ipow(begin_dx, 2) + 0.0319703 *lens_ipow(begin_y, 2)*begin_dy + 2.60607 *begin_y*lens_ipow(begin_dy, 2) + 1.75108 *begin_x*begin_dx*begin_dy + 0.0257636 *begin_x*begin_y*begin_dx + 60.72 *lens_ipow(begin_dx, 2)*begin_dy + -0.064435 *begin_y*lens_ipow(begin_lambda, 2) + -5.61868 *begin_dy*lens_ipow(begin_lambda, 2) + 0.00010636 *lens_ipow(begin_y, 3) + 52.0013 *lens_ipow(begin_dy, 3) + 0.0503633 *lens_ipow(begin_x, 2)*begin_dy*begin_lambda + 0.000582882 *lens_ipow(begin_x, 2)*begin_y*begin_lambda + -0.000793167 *lens_ipow(begin_x, 2)*begin_y*lens_ipow(begin_lambda, 2) + 3.17233e-05 *lens_ipow(begin_y, 4)*begin_dy + 325.173 *lens_ipow(begin_dy, 5) + 0.525617 *lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 3) + 21.4899 *begin_y*lens_ipow(begin_dy, 4) + -0.0692483 *lens_ipow(begin_x, 2)*begin_dy*lens_ipow(begin_lambda, 2) + 6.06448e-08 *lens_ipow(begin_y, 5) + 0.00599174 *lens_ipow(begin_y, 3)*lens_ipow(begin_dy, 2) + -71.8423 *lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 3)*begin_lambda + -1.48937 *begin_y*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2)*begin_lambda + 0.0373362 *lens_ipow(begin_x, 2)*begin_dy*lens_ipow(begin_lambda, 4) + 0.000422188 *lens_ipow(begin_x, 2)*begin_y*lens_ipow(begin_lambda, 4);
  pred_dx =  + 2.05505 *begin_dx + 0.00423523 *begin_x + -0.00636248 *begin_x*begin_lambda + -2.05391 *begin_dx*begin_lambda + 0.133439 *begin_y*begin_dx*begin_dy + 0.00145282 *begin_x*begin_y*begin_dy + 0.00223387 *lens_ipow(begin_x, 2)*begin_dx + 8.1081 *lens_ipow(begin_dx, 3) + 7.82256 *begin_dx*lens_ipow(begin_dy, 2) + 7.68026e-06 *begin_x*lens_ipow(begin_y, 2) + 7.94055e-06 *lens_ipow(begin_x, 3) + 0.0732182 *begin_x*lens_ipow(begin_dy, 2) + 0.211126 *begin_x*lens_ipow(begin_dx, 2) + 0.00073199 *lens_ipow(begin_y, 2)*begin_dx + 2.92184 *begin_dx*lens_ipow(begin_lambda, 2) + -1.44902 *begin_dx*lens_ipow(begin_lambda, 3) + -1.98384 *lens_ipow(begin_dx, 3)*begin_lambda + -0.00675267 *begin_x*lens_ipow(begin_dy, 2)*begin_lambda + 0.0134151 *begin_x*lens_ipow(begin_lambda, 3) + -1.49821 *begin_dx*lens_ipow(begin_dy, 2)*begin_lambda + -0.0239387 *begin_x*lens_ipow(begin_dx, 4) + -0.011796 *begin_y*begin_dx*begin_dy*lens_ipow(begin_lambda, 2) + 7.49172e-07 *begin_x*lens_ipow(begin_y, 2)*lens_ipow(begin_lambda, 2) + -0.0348161 *begin_x*lens_ipow(begin_dx, 2)*lens_ipow(begin_lambda, 2) + -0.0103739 *begin_x*lens_ipow(begin_lambda, 4) + 2.8302 *lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 2) + -0.0002496 *lens_ipow(begin_x, 2)*begin_dx*lens_ipow(begin_lambda, 3) + 12.6952 *begin_dx*lens_ipow(begin_dy, 6);
  pred_dy =  + 0.00354816 *begin_y + 1.95925 *begin_dy + -1.54235 *begin_dy*begin_lambda + -0.00456985 *begin_y*begin_lambda + 0.0775613 *begin_y*lens_ipow(begin_dx, 2) + 0.00247787 *lens_ipow(begin_y, 2)*begin_dy + 0.234202 *begin_y*lens_ipow(begin_dy, 2) + 0.138058 *begin_x*begin_dx*begin_dy + 0.00149723 *begin_x*begin_y*begin_dx + 8.34829 *lens_ipow(begin_dx, 2)*begin_dy + 0.00325748 *begin_y*lens_ipow(begin_lambda, 2) + 7.90658e-06 *lens_ipow(begin_x, 2)*begin_y + 1.98075 *begin_dy*lens_ipow(begin_lambda, 2) + 8.78797e-06 *lens_ipow(begin_y, 3) + 0.000750838 *lens_ipow(begin_x, 2)*begin_dy + 8.56854 *lens_ipow(begin_dy, 3) + -0.0640071 *begin_y*lens_ipow(begin_dy, 2)*begin_lambda + -0.0144772 *begin_y*lens_ipow(begin_dx, 2)*begin_lambda + -2.30067 *lens_ipow(begin_dx, 2)*begin_dy*begin_lambda + -2.80935 *lens_ipow(begin_dy, 3)*begin_lambda + -0.000534787 *lens_ipow(begin_y, 2)*begin_dy*begin_lambda + -0.859733 *begin_dy*lens_ipow(begin_lambda, 3) + -1.55283e-06 *lens_ipow(begin_y, 3)*begin_lambda + -0.0267553 *begin_x*begin_dx*begin_dy*lens_ipow(begin_lambda, 2) + -0.000142302 *begin_x*begin_y*begin_dx*lens_ipow(begin_lambda, 2) + -0.000105238 *lens_ipow(begin_x, 2)*begin_dy*lens_ipow(begin_lambda, 3) + 9.95066 *lens_ipow(begin_dy, 7) + -12.2781 *begin_y*lens_ipow(begin_dx, 4)*lens_ipow(begin_dy, 4);
  float dx1_domega0[2][2];
  dx1_domega0[0][0] =  + 86.4597  + 8.40417 *begin_lambda + 1.78167 *begin_y*begin_dy + 0.0365674 *lens_ipow(begin_x, 2) + 188.31 *lens_ipow(begin_dx, 2) + 61.8597 *lens_ipow(begin_dy, 2) + 5.99872 *begin_x*begin_dx + -5.77614 *lens_ipow(begin_lambda, 2) + 0.0513483 *lens_ipow(begin_y, 2)*begin_lambda + -3.18983 *begin_y*lens_ipow(begin_dx, 2)*begin_dy + -3.17616e-06 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2) + -0.0703785 *lens_ipow(begin_y, 2)*lens_ipow(begin_lambda, 2) + -8.44134 *begin_x*begin_dx*lens_ipow(begin_dy, 2)*begin_lambda + -875.592 *lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2)*begin_lambda + 0.0381449 *lens_ipow(begin_y, 2)*lens_ipow(begin_lambda, 4) + -1.5201e+06 *lens_ipow(begin_dx, 10) + -23987.7 *begin_x*lens_ipow(begin_dx, 9)+0.0f;
  dx1_domega0[0][1] =  + 1.78167 *begin_y*begin_dx + 0.0257671 *begin_x*begin_y + 123.719 *begin_dx*begin_dy + 2.35466 *begin_x*begin_dy + -1.06328 *begin_y*lens_ipow(begin_dx, 3) + 0.000288799 *lens_ipow(begin_x, 3)*begin_dy + -8.44134 *begin_x*lens_ipow(begin_dx, 2)*begin_dy*begin_lambda + -583.728 *lens_ipow(begin_dx, 3)*begin_dy*begin_lambda+0.0f;
  dx1_domega0[1][0] =  + 2.38848 *begin_y*begin_dx + 1.75108 *begin_x*begin_dy + 0.0257636 *begin_x*begin_y + 121.44 *begin_dx*begin_dy + -143.685 *begin_dx*lens_ipow(begin_dy, 3)*begin_lambda + -2.97875 *begin_y*begin_dx*lens_ipow(begin_dy, 2)*begin_lambda+0.0f;
  dx1_domega0[1][1] =  + 86.5823  + 8.22068 *begin_lambda + 0.0319703 *lens_ipow(begin_y, 2) + 5.21214 *begin_y*begin_dy + 1.75108 *begin_x*begin_dx + 60.72 *lens_ipow(begin_dx, 2) + -5.61868 *lens_ipow(begin_lambda, 2) + 156.004 *lens_ipow(begin_dy, 2) + 0.0503633 *lens_ipow(begin_x, 2)*begin_lambda + 3.17233e-05 *lens_ipow(begin_y, 4) + 1625.86 *lens_ipow(begin_dy, 4) + 1.57685 *lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 2) + 85.9595 *begin_y*lens_ipow(begin_dy, 3) + -0.0692483 *lens_ipow(begin_x, 2)*lens_ipow(begin_lambda, 2) + 0.0119835 *lens_ipow(begin_y, 3)*begin_dy + -215.527 *lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2)*begin_lambda + -2.97875 *begin_y*lens_ipow(begin_dx, 2)*begin_dy*begin_lambda + 0.0373362 *lens_ipow(begin_x, 2)*lens_ipow(begin_lambda, 4)+0.0f;
  float invJ[2][2];
  const float invdet = 1.0f/(dx1_domega0[0][0]*dx1_domega0[1][1] - dx1_domega0[0][1]*dx1_domega0[1][0]);
  invJ[0][0] =  dx1_domega0[1][1]*invdet;
  invJ[1][1] =  dx1_domega0[0][0]*invdet;
  invJ[0][1] = -dx1_domega0[0][1]*invdet;
  invJ[1][0] = -dx1_domega0[1][0]*invdet;
  const float dx1[2] = {out_x - pred_x, out_y - pred_y};
  for(int i=0;i<2;i++)
  {
    dx += invJ[0][i]*dx1[i];
    dy += invJ[1][i]*dx1[i];
  }
  sqr_err = dx1[0]*dx1[0] + dx1[1]*dx1[1];
}
out_dx = pred_dx;
out_dy = pred_dy;
