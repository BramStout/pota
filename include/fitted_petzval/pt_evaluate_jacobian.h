const float dx00 =  + 0.516318  + 0.239174 *lambda + 0.0291763 *y*dy + 0.0769265 *x*dx + -0.16516 *lens_ipow(lambda, 2) + 0.000319801 *lens_ipow(y, 2) + 0.000931011 *lens_ipow(x, 2) + 0.431597 *lens_ipow(dy, 2) + 0.417681 *lens_ipow(dx, 2) + 1.11768e-05 *lens_ipow(y, 2)*lambda + -0.000765131 *x*dx*lambda + -0.00017274 *x*y*dx*dy*lambda + 3.60487e-05 *lens_ipow(x, 6)*lens_ipow(dx, 2)*lens_ipow(lambda, 2) + 8.55943e-08 *lens_ipow(x, 4)*lens_ipow(y, 3)*lens_ipow(dx, 2)*dy + 2.89383e-09 *lens_ipow(x, 8)*lens_ipow(lambda, 2) + 0.00392363 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dx, 4)*lens_ipow(dy, 2) + 0.000904031 *lens_ipow(x, 5)*lens_ipow(dx, 3)*lens_ipow(lambda, 2) + 4.07445e-13 *lens_ipow(x, 6)*lens_ipow(y, 4) + -0.22746 *lens_ipow(x, 3)*lens_ipow(dx, 5)*lens_ipow(lambda, 2) + 5.40439e-07 *lens_ipow(x, 7)*dx*lens_ipow(lambda, 2)+0.0f;
const float dx01 =  + 0.0418018 *dx*dy + 0.0291763 *x*dy + 0.000639602 *x*y + 0.0212395 *y*dx + 2.23535e-05 *x*y*lambda + -8.637e-05 *lens_ipow(x, 2)*dx*dy*lambda + 5.13566e-08 *lens_ipow(x, 5)*lens_ipow(y, 2)*lens_ipow(dx, 2)*dy + 0.00261575 *lens_ipow(x, 3)*y*lens_ipow(dx, 4)*lens_ipow(dy, 2) + 2.32826e-13 *lens_ipow(x, 7)*lens_ipow(y, 3)+0.0f;
const float dx02 =  + 61.6861  + 6.09756 *lambda + 0.0418018 *y*dy + 0.0384633 *lens_ipow(x, 2) + -125.605 *lens_ipow(dx, 2) + -41.0878 *lens_ipow(dy, 2) + 0.835362 *x*dx + 0.0106198 *lens_ipow(y, 2) + -4.03513 *lens_ipow(lambda, 3) + -0.000382566 *lens_ipow(x, 2)*lambda + -8.637e-05 *lens_ipow(x, 2)*y*dy*lambda + 1.02996e-05 *lens_ipow(x, 7)*dx*lens_ipow(lambda, 2) + 124377 *lens_ipow(dx, 8)*lens_ipow(lambda, 2) + 3.42377e-08 *lens_ipow(x, 5)*lens_ipow(y, 3)*dx*dy + 0.00523151 *lens_ipow(x, 3)*lens_ipow(y, 2)*lens_ipow(dx, 3)*lens_ipow(dy, 2) + 0.000452016 *lens_ipow(x, 6)*lens_ipow(dx, 2)*lens_ipow(lambda, 2) + -0.284324 *lens_ipow(x, 4)*lens_ipow(dx, 4)*lens_ipow(lambda, 2) + 6.75549e-08 *lens_ipow(x, 8)*lens_ipow(lambda, 2)+0.0f;
const float dx03 =  + 0.0418018 *y*dx + 0.0291763 *x*y + -82.1756 *dx*dy + 0.863194 *x*dy + -8.637e-05 *lens_ipow(x, 2)*y*dx*lambda + 1.71189e-08 *lens_ipow(x, 5)*lens_ipow(y, 3)*lens_ipow(dx, 2) + 0.00261575 *lens_ipow(x, 3)*lens_ipow(y, 2)*lens_ipow(dx, 4)*dy+0.0f;
const float dx04 =  + 0.239174 *x + 6.09756 *dx + -0.33032 *x*lambda + -12.1054 *dx*lens_ipow(lambda, 2) + 1.11768e-05 *x*lens_ipow(y, 2) + -0.000382566 *lens_ipow(x, 2)*dx + -8.637e-05 *lens_ipow(x, 2)*y*dx*dy + 1.02996e-05 *lens_ipow(x, 7)*lens_ipow(dx, 2)*lambda + 27639.2 *lens_ipow(dx, 9)*lambda + 6.43074e-10 *lens_ipow(x, 9)*lambda + 0.000301344 *lens_ipow(x, 6)*lens_ipow(dx, 3)*lambda + -0.11373 *lens_ipow(x, 4)*lens_ipow(dx, 5)*lambda + 1.3511e-07 *lens_ipow(x, 8)*dx*lambda+0.0f;
const float dx10 =  + 0.0283685 *y*dx + 0.000624629 *x*y + 0.0203709 *x*dy + 1.69862e-05 *x*y*lambda + 2.17349e-14 *x*lens_ipow(y, 9) + 9.35071e-09 *lens_ipow(x, 3)*lens_ipow(y, 4)*lens_ipow(dx, 2)*dy + 9.12972e-14 *lens_ipow(x, 5)*lens_ipow(y, 5) + -0.627674 *x*y*lens_ipow(dy, 8) + 4.28086e-05 *lens_ipow(y, 5)*dx*lens_ipow(dy, 4) + 0.00203743 *lens_ipow(y, 4)*dx*lens_ipow(dy, 5)+0.0f;
const float dx11 =  + 0.453506  + 0.592232 *lambda + 0.411922 *lens_ipow(dx, 2) + 0.0785323 *y*dy + 0.451829 *lens_ipow(dy, 2) + 0.0283685 *x*dx + -0.817315 *lens_ipow(lambda, 2) + 0.000312315 *lens_ipow(x, 2) + 0.000940303 *lens_ipow(y, 2) + 0.395356 *lens_ipow(lambda, 3) + 4.8303e-05 *lens_ipow(y, 2)*lambda + 8.49311e-06 *lens_ipow(x, 2)*lambda + -0.000222919 *lens_ipow(y, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + -4.95406e-05 *lens_ipow(y, 4)*lens_ipow(dx, 2)*lens_ipow(dy, 2) + 9.7807e-14 *lens_ipow(x, 2)*lens_ipow(y, 8) + 2.31362e-10 *lens_ipow(y, 8)*lens_ipow(dx, 2) + 9.35071e-09 *lens_ipow(x, 4)*lens_ipow(y, 3)*lens_ipow(dx, 2)*dy + 7.6081e-14 *lens_ipow(x, 6)*lens_ipow(y, 4) + -0.313837 *lens_ipow(x, 2)*lens_ipow(dy, 8) + 0.000214043 *x*lens_ipow(y, 4)*dx*lens_ipow(dy, 4) + 0.00814971 *x*lens_ipow(y, 3)*dx*lens_ipow(dy, 5)+0.0f;
const float dx12 =  + 0.823843 *y*dx + 0.0283685 *x*y + -84.2485 *dx*dy + -1.98162e-05 *lens_ipow(y, 5)*dx*lens_ipow(dy, 2) + 5.14138e-11 *lens_ipow(y, 9)*dx + 4.67536e-09 *lens_ipow(x, 4)*lens_ipow(y, 4)*dx*dy + 4.28086e-05 *x*lens_ipow(y, 5)*lens_ipow(dy, 4) + 0.00203743 *x*lens_ipow(y, 4)*lens_ipow(dy, 5)+0.0f;
const float dx13 =  + 59.1587  + 19.1364 *lambda + 0.0392662 *lens_ipow(y, 2) + 0.903657 *y*dy + -42.1243 *lens_ipow(dx, 2) + -19.7228 *lens_ipow(lambda, 2) + 0.0101854 *lens_ipow(x, 2) + -124.434 *lens_ipow(dy, 2) + 7.11498 *lens_ipow(lambda, 4) + -0.000148612 *lens_ipow(y, 3)*dy*lens_ipow(lambda, 2) + -1.98162e-05 *lens_ipow(y, 5)*lens_ipow(dx, 2)*dy + 2.33768e-09 *lens_ipow(x, 4)*lens_ipow(y, 4)*lens_ipow(dx, 2) + -2.51069 *lens_ipow(x, 2)*y*lens_ipow(dy, 7) + 0.000171234 *x*lens_ipow(y, 5)*dx*lens_ipow(dy, 3) + 0.0101871 *x*lens_ipow(y, 4)*dx*lens_ipow(dy, 4)+0.0f;
const float dx14 =  + 19.1364 *dy + 0.592232 *y + -1.63463 *y*lambda + -39.4456 *dy*lambda + 1.18607 *y*lens_ipow(lambda, 2) + 1.6101e-05 *lens_ipow(y, 3) + 8.49311e-06 *lens_ipow(x, 2)*y + 28.4599 *dy*lens_ipow(lambda, 3) + -0.000148612 *lens_ipow(y, 3)*lens_ipow(dy, 2)*lambda+0.0f;
const float dx20 =  + -0.0305953  + -0.000844601 *x*dx + 1.74614e-06 *lens_ipow(y, 2) + -0.0847201 *lens_ipow(dy, 2)*lambda + -1.54502e-05 *lens_ipow(y, 2)*lambda + -2.67516e-05 *lens_ipow(x, 2)*lambda + -0.00275435 *y*dy*lambda + -0.00078191 *x*dx*lambda + 0.0184584 *lens_ipow(dx, 4) + 1.45081e-05 *lens_ipow(x, 2)*lens_ipow(lambda, 2) + 0.0421838 *lens_ipow(dy, 2)*lens_ipow(lambda, 2) + 0.00116668 *y*dy*lens_ipow(lambda, 2) + -0.020373 *lens_ipow(dx, 2)*lens_ipow(lambda, 3) + -1.18558 *y*lens_ipow(dx, 4)*lens_ipow(dy, 3) + 0.000373915 *x*lens_ipow(y, 2)*lens_ipow(dx, 3)*lens_ipow(dy, 2) + 0.000963685 *lens_ipow(lambda, 9)+0.0f;
const float dx21 =  + 3.49228e-06 *x*y + -3.09004e-05 *x*y*lambda + -0.00275435 *x*dy*lambda + -0.00141597 *y*dx*lambda + -0.0998601 *dx*dy*lambda + 0.0249779 *dx*dy*lens_ipow(lambda, 2) + 0.00116668 *x*dy*lens_ipow(lambda, 2) + -1.18558 *x*lens_ipow(dx, 4)*lens_ipow(dy, 3) + 0.000373915 *lens_ipow(x, 2)*y*lens_ipow(dx, 3)*lens_ipow(dy, 2)+0.0f;
const float dx22 =  + -1.63943  + 0.0323359 *lambda + -0.0004223 *lens_ipow(x, 2) + 14.7867 *lens_ipow(dx, 2)*lambda + -0.000390955 *lens_ipow(x, 2)*lambda + -0.000707983 *lens_ipow(y, 2)*lambda + -2.05796 *lens_ipow(dy, 2)*lambda + -0.0998601 *y*dy*lambda + 0.0738335 *x*lens_ipow(dx, 3) + 0.0249779 *y*dy*lens_ipow(lambda, 2) + -24.9433 *lens_ipow(dx, 2)*lens_ipow(lambda, 2) + 7.88284 *lens_ipow(dx, 4) + -0.0407461 *x*dx*lens_ipow(lambda, 3) + 12.2832 *lens_ipow(dx, 2)*lens_ipow(lambda, 3) + -4.7423 *x*y*lens_ipow(dx, 3)*lens_ipow(dy, 3) + 20.8038 *lens_ipow(dy, 8) + 10674.9 *lens_ipow(dx, 4)*lens_ipow(dy, 4) + 0.000560873 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 2)+0.0f;
const float dx23 =  + -0.16944 *x*dy*lambda + -0.00275435 *x*y*lambda + -4.11593 *dx*dy*lambda + -0.0998601 *y*dx*lambda + 0.0249779 *y*dx*lens_ipow(lambda, 2) + 0.0843676 *x*dy*lens_ipow(lambda, 2) + 0.00116668 *x*y*lens_ipow(lambda, 2) + -3.55673 *x*y*lens_ipow(dx, 4)*lens_ipow(dy, 2) + 166.431 *dx*lens_ipow(dy, 7) + 8539.94 *lens_ipow(dx, 5)*lens_ipow(dy, 3) + 0.000373915 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dx, 3)*dy+0.0f;
const float dx24 =  + 0.0323359 *dx + 4.9289 *lens_ipow(dx, 3) + -0.0847201 *x*lens_ipow(dy, 2) + -1.54502e-05 *x*lens_ipow(y, 2) + -8.9172e-06 *lens_ipow(x, 3) + -0.00275435 *x*y*dy + -0.000390955 *lens_ipow(x, 2)*dx + -0.000707983 *lens_ipow(y, 2)*dx + -2.05796 *dx*lens_ipow(dy, 2) + -0.0998601 *y*dx*dy + 0.0499558 *y*dx*dy*lambda + -16.6288 *lens_ipow(dx, 3)*lambda + 9.67204e-06 *lens_ipow(x, 3)*lambda + 0.0843676 *x*lens_ipow(dy, 2)*lambda + 0.00233336 *x*y*dy*lambda + -0.0611191 *x*lens_ipow(dx, 2)*lens_ipow(lambda, 2) + 12.2832 *lens_ipow(dx, 3)*lens_ipow(lambda, 2) + 0.00867316 *x*lens_ipow(lambda, 8)+0.0f;
const float dx30 =  + 0.0669129 *dx*dy + -9.59075e-05 *y*dx + 0.000628596 *x*dy + 0.000150057 *x*dy*lambda + 4.94668e-05 *y*dx*lambda + 0.00640416 *dx*dy*lambda + -0.0369238 *lens_ipow(dx, 3)*dy + -0.000400921 *y*dx*lens_ipow(dy, 2) + 1.78479e-05 *lens_ipow(x, 2)*dx*dy+0.0f;
const float dx31 =  + -0.030348  + -0.000739868 *lambda + 0.0043513 *lens_ipow(dx, 2) + -0.00126683 *y*dy + -0.00400459 *lens_ipow(dy, 2) + -9.59075e-05 *x*dx + 0.000576135 *lens_ipow(lambda, 2) + -9.15615e-06 *lens_ipow(y, 2) + -1.93542e-06 *lens_ipow(y, 2)*lambda + 4.94668e-05 *x*dx*lambda + -0.000400921 *x*dx*lens_ipow(dy, 2) + 0.0245005 *lens_ipow(dy, 4) + 0.011227 *lens_ipow(dx, 4)*lambda+0.0f;
const float dx32 =  + 0.0087026 *y*dx + 0.0669129 *x*dy + -9.59075e-05 *x*y + 5.83908 *dx*dy + 4.94668e-05 *x*y*lambda + 0.00640416 *x*dy*lambda + -0.110771 *x*lens_ipow(dx, 2)*dy + 5.10719 *dx*lens_ipow(dy, 3) + -0.000400921 *x*y*lens_ipow(dy, 2) + 5.94929e-06 *lens_ipow(x, 3)*dy + 0.0449081 *y*lens_ipow(dx, 3)*lambda+0.0f;
const float dx33 =  + -1.6733  + 0.226598 *lambda + -0.000633417 *lens_ipow(y, 2) + -0.00800919 *y*dy + 0.0669129 *x*dx + 2.91954 *lens_ipow(dx, 2) + -0.334116 *lens_ipow(lambda, 2) + 0.000314298 *lens_ipow(x, 2) + 2.65698 *lens_ipow(dy, 2) + 7.50285e-05 *lens_ipow(x, 2)*lambda + -0.339882 *lens_ipow(dy, 2)*lambda + 0.176171 *lens_ipow(lambda, 3) + 0.00640416 *x*dx*lambda + -0.0369238 *x*lens_ipow(dx, 3) + 7.66079 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + 9.74395 *lens_ipow(dy, 4) + -0.000801842 *x*y*dx*dy + 0.0980022 *y*lens_ipow(dy, 3) + 5.94929e-06 *lens_ipow(x, 3)*dx+0.0f;
const float dx34 =  + 0.226598 *dy + -0.000739868 *y + 0.00115227 *y*lambda + -0.668231 *dy*lambda + 7.50285e-05 *lens_ipow(x, 2)*dy + -0.113294 *lens_ipow(dy, 3) + 0.528514 *dy*lens_ipow(lambda, 2) + -6.45139e-07 *lens_ipow(y, 3) + 4.94668e-05 *x*y*dx + 0.00640416 *x*dx*dy + 0.011227 *y*lens_ipow(dx, 4)+0.0f;
const float dx40 =  + -0.000344805 *dx + -1.40507e-05 *x + -2.16548e-05 *x*y*dy + -1.09547e-05 *lens_ipow(y, 2)*dx + -9.13261e-07 *x*lens_ipow(y, 2) + -1.33675e-08 *lens_ipow(x, 5) + -5.31861e-07 *lens_ipow(x, 4)*dx + -3.94542e-09 *lens_ipow(x, 6)*dx + -1.95409e-11 *lens_ipow(x, 3)*lens_ipow(y, 4) + 3.76722e-08 *lens_ipow(x, 2)*lens_ipow(y, 3)*dx*dy + -1.70976e-07 *lens_ipow(x, 5)*lens_ipow(dx, 2) + -7.479e-13 *x*lens_ipow(y, 6) + 0.000288271 *lens_ipow(x, 3)*lens_ipow(dx, 6) + -2.82777e-14 *lens_ipow(x, 7)*lens_ipow(y, 2) + -3.64078e-14 *lens_ipow(x, 9) + 1.96509e-07 *lens_ipow(x, 4)*y*lens_ipow(dx, 3)*dy*lambda+0.0f;
const float dx41 =  + -1.08274e-05 *lens_ipow(x, 2)*dy + -2.19093e-05 *x*y*dx + -9.13261e-07 *lens_ipow(x, 2)*y + -1.24499e-06 *lens_ipow(y, 3) + -0.000920319 *y*lens_ipow(dy, 2) + -7.06926e-05 *lens_ipow(y, 2)*dy + -7.28612e-10 *lens_ipow(y, 5) + -1.95409e-11 *lens_ipow(x, 4)*lens_ipow(y, 3) + 3.76722e-08 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx*dy + -2.2437e-12 *lens_ipow(x, 2)*lens_ipow(y, 5) + 8.13043e-06 *lens_ipow(y, 3)*lens_ipow(dy, 4)*lambda + -7.06942e-15 *lens_ipow(x, 8)*y + 3.93018e-08 *lens_ipow(x, 5)*lens_ipow(dx, 3)*dy*lambda+0.0f;
const float dx42 =  + -0.000344805 *x + -0.602196 *lens_ipow(dx, 3) + -0.89825 *dx*lens_ipow(dy, 2) + -1.09547e-05 *x*lens_ipow(y, 2) + -1.06372e-07 *lens_ipow(x, 5) + -5.63631e-10 *lens_ipow(x, 7) + 1.25574e-08 *lens_ipow(x, 3)*lens_ipow(y, 3)*dy + -5.69921e-08 *lens_ipow(x, 6)*dx + 0.000432406 *lens_ipow(x, 4)*lens_ipow(dx, 5) + 1.17905e-07 *lens_ipow(x, 5)*y*lens_ipow(dx, 2)*dy*lambda+0.0f;
const float dx43 =  + -0.89825 *lens_ipow(dx, 2)*dy + -1.08274e-05 *lens_ipow(x, 2)*y + -0.000920319 *lens_ipow(y, 2)*dy + -2.35642e-05 *lens_ipow(y, 3) + 1.25574e-08 *lens_ipow(x, 3)*lens_ipow(y, 3)*dx + 8.13043e-06 *lens_ipow(y, 4)*lens_ipow(dy, 3)*lambda + 3.93018e-08 *lens_ipow(x, 5)*y*lens_ipow(dx, 3)*lambda+0.0f;
const float dx44 =  + 0.836383  + -3.47871 *lambda + 5.1014 *lens_ipow(lambda, 2) + -2.57648 *lens_ipow(lambda, 3) + 2.03261e-06 *lens_ipow(y, 4)*lens_ipow(dy, 4) + 3.93018e-08 *lens_ipow(x, 5)*y*lens_ipow(dx, 3)*dy+0.0f;
